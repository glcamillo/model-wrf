#!/bin/bash
#
#  Encoding UTF-8
#  Last revision: 2022-07-06
#  Obs.: these scripts uses features from Bash that are not found in other versions of sh.


# runwrf.sh: this is the main script that executes the routines for the WRF model.
#
#  Versions and changelogs (more detailed in the Readme.md):
#    0.1 (2009): this script was aimed to automatize the WRF model routines; this
#                was based on the script that executed the MM5 model.
#    This script and the others went through several revisions/versions 
#    4.0 (2021-10-12): this script enters in revision.
#    4.1 (2022-02-10): the model is running now, but there is still more
#                      development and testing to go
# ----------------------------------------


#  Command line parameters for script execution (basic info; more in Readme.md)
#  ./runwrf.sh -conf A -ts 2022-01-01-12 -ti 24 -gtr 3 -np 4 -gd gfs0p50
#    -conf A : domain configuration A
#    -ts 2022-01-01-12 : date-time of start of simulation
#    -ti 24 : integration time in hours (24 hours)
#  OPTIONAL
#    -tiout 3 | 6 :(H) time interval of output (default:3h) (OPTIONAL)"
#    -gd gfs1p00 | gfs0p50 | gfs0p25 | cptec_wrf_5km :global data NCEP-GFS (1|0,5|0,25 degree - default:gfs1p00) OR WRF from CPTEC (5km)"
#    -gti 1 | 3 | 6 :(H) time interval (hours) of global input data (time resolution): 1 for cptec_wrf_5km and 3/6 for gfs (defaults are: 1h for cptec_wrf_5km and 3h for gfs)"
#    -np 1 :number of processes to be use: (default=1)"
#    --wrf-time-step 20 :value (in s) of WRF time step (default:each configuration has been defined with s

# Or call for help: ./runwrf.sh --help
# ----------------------------------------


# Set debugging messages (variable tracking)
# DEBUG=1 # debug ON
  DEBUG=0 # debug OFF


## TODO TODO TODO permanente
#  More in README.md

###############################################################
###############################################################
#
#                   Basic and Global DEFINITIONS
#
###############################################################
###############################################################


# This is the directory from the scripts were called
CURRENT_DIR=/home/$(id -un)/model-wrf

# String that contains the letters of all domains configured
CONFIG_VALUES="ABCDEFGHIJKL"
declare -u CONFIG="A"  # receives only uppercase letters
# What scripts epends on this:
#   model-wrf/post_processing/process_ARWpost.sh
#   model-wrf/post_processing/generate_output_graphics.sh

# This is for AFWA diagnostics output
declare -i GEN_WRFOUT_DIAGS_AFWA=1

COMPILADOR=GFORTRAN

# This variable will track the parameters supplied by user
NUM_PARAM=0  

# This defines the MANDATORY parameters (number) for calling
#      this script.
NUM_ARGUMENTOS=3      # conf ts ti
# ./runwrf.sh -conf A -ts 2021-06-10-00 -ti 24 -gd gfs0p25 -gtr 6
# Optional parameters
# gd: gfs1p00 | gfs0p50 | gfs0p25 | cptec_wrf_5km
# gtr: 3 or 6 hours

# Some default arguments/parameters
NUM_PROC=1  # number of process
WRF_PARAM_FOR_MPI_1=""   # option to mpirun: --use-hwthread-cpus
RES_G_NCEP="1p00" # global data: resolution
RUN_TIME_HOURS=24 # integration time

# Variable to define where the global met data come from
#        GFS, CPTEC (from WRF model), etc
# ATTENTION: this choice is determined by the domain configuration (for best config and results)
GLOBAL_DATA_SOURCE=gfs
# GLOBAL_DATA="gfs1p00" This var contain the resolution of input data for the GLOBAL_DATA_SOURCE

# If user use the command line --use-alternate-data then the function
#      will read the global data dir from user and set the variable
USE_ALTERNATE_DATA="no"     # Default


# Setting as a global variables
DIR_WRF_OUTPUT=""
DIR_WPS_INPUT=""

# This variable will be used by user to provide some specific value.
# This will be copied to the global var _WRF_TIME_STEP that will be exported.
WRF_TIME_STEP=0


# -------- Settings that modify the path of execution

# 20220422: to use or not the geogrid file provided by this scripts
#           Default=no -> geo_em.d0? will be generated by program geogrid.exe
#           Changed the name of variable  
USE_STATIC_GEOGRID="no"

# 20220309: how will the previous execution be handled?
# Two type of configurations: 
#  - Domain and date-hour and length of simulation
#  - Physics, dynamics, and other relative to wrf execution


# a) Discard the state of previous execution and starts a new (can use the same configuration
#    or a manual editing of the namelist files (WPS,WRF): bin/WPS/namelist.wps and bin/WRF/namelist.input
# USE_STATIC_NAMELIST_FILES="yes"
# b) Or, the normal execution with parameters defined in command line and in the config files.
USE_STATIC_NAMELIST_FILES="no"   # Default

# -------- 



#  ------- Setting to enable manual or automatic (via cron) execution

# Para rodar via cron ajustar manualmente o diretório CURRENT_DIR no início do
#       processamento do modelo.
# Em 08nov06: variavel para indicar que se quer ou 
#             nao inicilizar interativamente o grupo data-hora.
# Em 15ago10: tipos de inicializações do grupo data-hora
# AUTOMATIC=data do dia de hoje; hora=12
# INTERACTIVE=o script solicita os valores via questionamentos.
#DH_HOW_RUN_SCRIPT=AUTOMATIC
DH_HOW_RUN_SCRIPT=INTERACTIVE



#############################################################
#############################################################
#
#                  General Functions
#
#############################################################
#############################################################


# Show debug messages for depuration
f_debug ()
{
    [ ${DEBUG} == 1 ] && echo -e "\033[33;1m DEBUG (${1}):${2}=${3}\033[m \n"
}


#   terminar_script () {
shutdown_execution () {
      echo -e "\n\n $1 \n\n" ; exit $2
}


mensagem () {
      echo -e "\n $1 \n" ;
}

# -------------------------------------------------------------
#  Funcao de AJUDA para parametros de linha de comando
# -------------------------------------------------------------
function help
{
    echo -e " Use: \$ ./$(basename "$0") parameters options\n"
    echo -e "-- MANDATORY parameters--"
    echo " -conf A | B | ... Z :domain configuration"
    echo " -ts 2021-06-01-12 :(yyyy-mm-dd-HH) date-time of start data/hora inicial da integração"
    echo " -ti 24 | 48 | 72 :(HH) integration time in hours (run time forecast) (default:24h)"
    
    echo -e "\n-- OPTIONAL parameters--"
    echo " -tiout 3 | 6 :(H) time interval of output (default:3h)"
    echo " -gd gfs1p00 | gfs0p50 | gfs0p25 | cptec_wrf_5km :global data NCEP-GFS (1|0.5|0.25 degree - default:gfs1p00) OR WRF from CPTEC (5km)"
    echo " -gti 1 | 3 | 6 :(H) time interval (hours) of global input data (time resolution): 1 for cptec_wrf_5km and 3/6 for gfs (defaults are: 1h for cptec_wrf_5km and 3h for gfs)"
    echo -e "\n"
    echo " -np 1 :number of processes to be use: (default=1)"
    echo " --wrf-time-step 20 :value (in s) of WRF time step (default:each configuration has been defined with some default time step)"
    
    echo -e "\n-- OPTIONS --"
    echo " [--use-hwthread-cpus ] : use hardware threads as independent cpus (default:empty)"
    echo " [--use-generated-geogrid ] : use file geo_em.d0[03] (geogrid output) generated previously and available in model scripts directory (default: use the program geogrid.exe to generate)"
    echo " [--use-static-config ] : the script will use the namelist files in their directories. Only need provide the mandatory parameters to verify DIR and INPUT DATA - default: use dynamic generation of the namelist files."
    # TODO TODO
    echo " [--use-alternate-date : use alternate data: the user must indicate the input data dir. ]"

    echo " "
    echo " -h|--help : for help"
    echo " -conf -h : for help about domain configurations (not yet implemented)"
    echo "Observations:\n"
    echo "  a) The parameter \"tiout\" is for the coarse domain (domain 1). The domain 2 and 3 (if configured) will output data in time interval of 1 hour"
    echo "  b) There are no guarantee that using virtual processors (hyperthreading) will upgrade performance. Recommendation is one process per core."
    echo -e "\n-- EXAMPLE --"
    echo "./runwrf.sh -conf G -ts 2022-01-01-12 -ti 24 -gti 3 -np 4 -gd gfs0p50 --use-generated-geogrid"
    echo "Configuration G: r_sudeste-SP-MG-PR-MS-2d"
    echo "Start of simulation: 2022, 1st january at 12 UTC"
    echo "Time of forecast: 24 hours"
    echo "Time step of global data: 3 hours"
    echo "Type and resolution of global data: GFS from NCEP - 0.5 degrees"
    echo "Use domain configuration (physical) from geogrid.exe"

    
    shutdown_execution " " 0

}

# -------------------------------------------------------------
#  Funcao de AJUDA para parametros de linha de comando
# -------------------------------------------------------------
# TODO TODO
function help_for_config_domain
{

 	shutdown_execution "TODO-> help about config domains " 0
}

# -------------------------------------------------------------
#         Function: set dir variables
# -------------------------------------------------------------
# TODO TODO TODO TODO   These data need to come from an external file

function f_set_or_create_dir
{

    # Em 27abr05: modificação dos diretórios.
    # Em 31out05: modificação do diretório GFS (do sítio NCEP).
    # Em 31dez21: new model data dir

#     Example:
#     model-data-input-global/2021-12-31-12-gfs
#     DIR_DATA_INPUT=model-data-input-global      THIS FUNCTION
#      2021-12-31-12-gfs

#     model-data-output/2021-12-31-12_dom_A-SC/wrf-1
#     DIR_DATA_OUTPUT=model-data-output           THIS FUNCTION
#     DIR_DOMAIN_OUTPUT=2021-12-31-12_dom_A-SC FUNCTION:   

#     DIR_WRF_OUTPUT=$DIR_DATA_OUTPUT/$DIR_DOMAIN_OUTPUT/wrf-[a-z]   main processing

#     DIR_DATA_OUTPUT/DIR_DOMAIN_OUTPUT/DIR_WRF_OUTPUT
#     model-data-output/2021-12-31-12_dom_A-SC/wrf-1        
#        DIR_WRF_OUTPUT=${DIR_DATA_OUTPUT}/${DIR_DOMAIN_OUTPUT}/wrf-$retorno

#     subdir:  `yyyy-mm-dd-HH-gfs` (for GFS) yyyy-mm-dd-HH-cptec-wrf (for WRF from CPTEC)

 # Directory for the OUTPUT data from the model: `model-data-output`
 #    subdir: `yyyy-mm-dd-HH_dom_A-SC`    `yyyy-mm-dd-HH_dom_F-SP`
 #    Each is for some domain and data-time of initialization. If there a need more than once specific configuration (for example, diferent physics), each one outputs in diferent directory
 #    subdir: `yyyy-mm-dd-HH_dom_A-SC/wrf-1...10` and so on        
        
#     DIR_DATA_OUTPUT/DIR_DOMAIN_OUTPUT/DIR_WRF_OUTPUT
#     model-data-output/2021-12-31-12_dom_A-SC/wrf-1

    # Diretório PRINCIPAL => diretório do USUÁRIO
    export USER_PATH=$HOME
    # Diretório dos arquivos executáveis (pgi, gradsc, mm5)
    export BIN_PATH=$USER_PATH/bin
    # Diretório dos binários
    BINARIOS_PATH=$USER_PATH/binarios
    # Diretório de TRABALHO. Em 03jul10: diretórios de trabalho para o WRF.
    WRF_PATH=$USER_PATH/bin/WRF
    # Em 06jul10: será exportada para ser usada pelos scripts do WPS.
    export WPS_PATH=$USER_PATH/bin/WPS
    
    # Diretório dos arquivos de terreno. O nome do diretório é aquele da descompactação.
    GEODATA_PATH=$USER_PATH/bin/WPS_GEOG
    
    # Diretório backup dos arquivos de dados da rodada corrente.
    #    06jul10: será exportado em função do wps.
    #    23dez21: the organization of directories will change. Vide Readme
    # 
    DIR_DATA_INPUT=$USER_PATH/model-data-input-global
    DIR_DATA_OUTPUT=$USER_PATH/model-data-output

    # If dirs do not exist, create it.
    if [ ! -d ${DIR_DATA_INPUT} ]; then
        mkdir -p ${DIR_DATA_INPUT}
        [ $? -ne 0 ] && shutdown_execution "ERROR: problem in creating dir ${DIR_DATA_INPUT}" 1
    fi
    if [ ! -d ${DIR_DATA_OUTPUT} ]; then
        mkdir -p ${DIR_DATA_OUTPUT}
        [ $? -ne 0 ] && shutdown_execution "ERROR: problem in creating dir ${DIR_DATA_OUTPUT}" 1
    fi
}


# Em 02jan22: set the variable that will contain the CONFIGURATION (DOMAIN config)
#             and the origin of global data (that is dependent from configuration)
function f_config_of_domain
{
    if [ ! -z $1 ]; then
        if [ $1 = "-h" ] -o [ $1 = "-H" ]; then
            ajuda_configuracoes
        fi
    else
        shutdown_execution 1
    fi
}

# Time (DATE-HOUR) of the start of integration
function t_start
{

    # Test the format: 2022-01-01-00
    grep -E '^20[1-2][0-9]-[0-1][0-9]-[0-3][0-9]-(00|06|12|18)' <<<  $1 > /dev/null
    [[ $? -ne 0 ]] && mensagem "ERROR in the parameter ts:$1 " && return 1

    START_YEAR=$(cut -d- -f 1 <<<  $1)
    START_MONTH=$(cut -d- -f 2 <<<  $1)
    START_DAY=$(cut -d- -f 3 <<<  $1)
    START_HOUR=$(cut -d- -f 4 <<<  $1)

    NUM_PARAM=$(( $NUM_PARAM + 1))
}


# Tempo de integração: 24, 48 ou 72 horas
# Time of integration in hours.
# namelist.input parameter: run_hours
function t_integracao
{
    # Test if ${1} is only number
    if [[ ! $1 =~ ^[0-9]+$ ]] ; then
        mensagem "ERROR in the parameter ti:$1 "
        return 1
    fi    
    case $1 in
        24) RUN_TIME_HOURS=24 ;;
        48) RUN_TIME_HOURS=48 ;;
        72) RUN_TIME_HOURS=72 ;;
        *) mensagem "ERROR in the parameter ti:$1 " ; return 1 ;;
    esac    
    
    NUM_PARAM=$(( $NUM_PARAM + 1))
}


# Sets the GLOBAL_DATA and GLOBAL_DATA_SOURCE used 
# to generate the dir: DIR_WPS_INPUT
function f_global_data
{
    case ${1} in
        gfs1p00) GLOBAL_DATA="gfs1p00"; GLOBAL_DATA_SOURCE="gfs" ;;
        gfs0p50) GLOBAL_DATA="gfs0p50"; GLOBAL_DATA_SOURCE="gfs" ;;
        gfs0p25) GLOBAL_DATA="gfs0p25"; GLOBAL_DATA_SOURCE="gfs" ;;
        cptec_wrf_5km) GLOBAL_DATA="cptec_wrf_5km"; GLOBAL_DATA_SOURCE="cptec-wrf" ;;
        *) mensagem "ERROR in the parameter gd:${1} " ; return 1 ;;
    esac
    
    # 20220205: the global data (source and RESOLUTION) are determined by
    #           the choose of the configuration (it is to avoid problems in downscaling)
    #           But if the user wants to modify, then he can do so.
    
    # NUM_PARAM=$(( $NUM_PARAM + 1))
}

# TODO TODO TODO
function f_use_alternate_data
{
      echo '********************************'
      echo ' Dados globais (fronteira e inicialização)'
      echo ' Opção para o usuário entrar com diretório para'
      echo '    localização de dados alternativos'
      echo ' Observations:'
      echo '  a) The format of data MUST be in GRIB2. The model (UNGRIB)'
      echo '     accepts other formats, but it must be configures before'
      echo '  b) Each file need contains only one forecast date-time'
      echo '********************************'
      answer=n
      while [ x$answer == "xn" ] || [ x$answer == "xN" ]; do
        echo ' Enter the full directory of input data:'
        read answer
        DIR_WPS_INPUT=$answer
        if [ x$answer != "xn" ] && [ x$answer != "xN" ]; then
            read -p "Confirm dir of global input data [$DIR_WPS_INPUT] (y/n):" answer
            if [ x$answer == "xy" ] || [ x$answer == "xY" ]; then
                GLOBAL_DATA_SOURCE="grib2"
                GLOBAL_DATA="grib2"
            fi
        fi
      done
      
      echo " Value of global time interval (forecast files): $GLOBAL_DATE_TIME_INTERVAL"
      echo " Is this value correct (y) or you want modify it (n)?"
      read answer
      if [ x$answer == "xn" ] || [ x$answer == "xN" ]; then
            read -p "What time interval in HOURS between forecast files: " answer
            GLOBAL_DATE_TIME_INTERVAL=$answer
      fi
      return 0
}




# -------------------------------------------------------------
#  Function: set the parameters of namelist files for WPS and WRF
#  TODO TODO Use an external script to process the namelist
#  TODO TODO   parameters that will be read from a text file.
#  TODO TODO The aim is to put out the configuration values from
#  TODO TODO   this script file.
# -------------------------------------------------------------
function f_set_domain_and_phys_parameters {
    # process-parameters-dom-and-phy.sh
    
    # Other option for CONFIG: declare it as uppercase: declare -u CONFIG (in the main section of this script)
    # Obs: use of regex in Bash
    if [[ ${1} =~ [:alfa:]* ]] && [[ ${#1} -eq 1 ]]; then
        CONFIG=$(tr [:lower:] [:upper:] <<< ${1})
        if [[ ${CONFIG} =~ ${CONFIG_VALUES} ]] && [ $? -ne 0 ] ; then
            mensagem "ERROR in the parameter conf:${1} The value is out of the config domains available:$CONFIG_VALUES "
            return 1
            #shutdown_execution "The value {$1} is out of the config domains available {$CONFIG_VALUES}. Exiting ... 1"
        fi
    else
        mensagem "ERROR in the parameter conf:${1} The value is INCORRECT."
        return 1
        #shutdown_execution "The value {$1} is INCORRECT. Exiting ... 1"
    fi
    

case $CONFIG in
[aA]) # ********************  3 domínios: cone sul da AS -> região sul (Brasil) -> RS e SC
        CONFIG_NAME="conesul-RS-SC-PR-3d"
        
        export _MAX_DOMAIN=3

        # 20220131: inclusion in this configuration, but can be 
        #             modified.
        export _WRF_TIME_STEP=108
        
        # 20220131:this is the parameter history_interval of namelist.input (MINUTES)
        #         Frequency at which to write data to the history (wrfout) file. 
        if [ -z ${_T_INTERVAL_OUTPUT_1} ]; then  # Not set by the user
            export _T_INTERVAL_OUTPUT_1=180  ## interval time: 3 h for DOMAIN 1
        fi
        export _T_INTERVAL_OUTPUT_2=60  ## interval time: 1 h for DOMAIN 2
        export _T_INTERVAL_OUTPUT_3=60  ## interval time: 1 h for DOMAIN 3

        
        
        export _PARENT_ID_2=1;  export _PARENT_ID_3=2
        export _I_PARENT_START_2=15 ; export _I_PARENT_START_3=70
        export _J_PARENT_START_2=49 ; export _J_PARENT_START_3=75
        
        export _GEODATA_RES_1=5m; export _GEODATA_RES_2=2m; export _GEODATA_RES_3=30s
        export _MAP_PROJECTION=lambert
        export _E_WE_1=100;  export _E_WE_2=214;  export _E_WE_3=367
        export _E_SN_1=140;  export _E_SN_2=205;  export _E_SN_3=307

        export _DX_1=18000
        export _DY_1=18000
        
        # Spatial resolutions of nests are calculated from parent_grid_ratio.
        # No more necessary.
        export _DX_2=6000; export _DX_3=2000
        export _DY_2=6000; export _DY_3=2000

        export _REF_LAT=-31.41;  export _REF_LON=-53.435
        export _TRUELAT1=-31.41; export _TRUELAT2=-31.41; export _STAND_LON=-53.435
        
        # 20211223: conf determines the choice of global data (source and/or
        #           resolution and interval)
        GLOBAL_DATE_TIME_INTERVAL=3  # 3 hours
        GLOBAL_DATA=gfs0p50   # GFS_0p50  GFS_0p25   NCEP_WRF_1km
        GLOBAL_DATA_SOURCE="gfs"
        
        # Included to considerer more ratio options
        export _PARENT_RATIO_2=3   # Best values: 3 or 5
        export _PARENT_RATIO_3=3   # Best values: 3 or 5
        
        export  _FEEDBACK=1 # 0 one-way no feedback    1 two-way w/ feedbak (default)
        export  _SMOOTH=2   # Default=2
        
        export _MP_PHYSICS_1=5; export _MP_PHYSICS_2=5;  export _MP_PHYSICS_3=5
        export _BL_PBL_PHYSICS_1=1; export _BL_PBL_PHYSICS_2=1; export _BL_PBL_PHYSICS_3=1
        export _CU_PHYSICS_1=16; _CU_PHYSICS_2=16; _CU_PHYSICS_3=0;
        
        export _E_VERT=42  # Number o vertical levels. The levels are
                           #   automatically calculated (auto_levels_opt=2)
                           #   stretching in lower and in top of the atmosphere.   

;;

[bB]) # ****************************
        CONFIG_NAME="r_sul-RS-SC-2d"
        
        export _MAX_DOMAIN=2

        # 20220131: inclusion in this configuration, but can be 
        #             modified.
        export _WRF_TIME_STEP=60
        
        # 20220131:this is the parameter history_interval of namelist.input (MINUTES)
        #         Frequency at which to write data to the history (wrfout) file. 
        if [ -z ${_T_INTERVAL_OUTPUT_1} ]; then  # Not set by the user
            export _T_INTERVAL_OUTPUT_1=180  ## interval time: 3 h for DOMAIN 1
        fi
        export _T_INTERVAL_OUTPUT_2=60  ## interval time: 1 h for DOMAIN 2
        export _T_INTERVAL_OUTPUT_3=60  ## interval time: 1 h for DOMAIN 3       
        
        export _PARENT_ID_2=1;  export _PARENT_ID_3=""
        export _I_PARENT_START_2=51 ; export _I_PARENT_START_3=""
        export _J_PARENT_START_2=71 ; export _J_PARENT_START_3=""
        
        export _GEODATA_RES_1=2m; export _GEODATA_RES_2=30s; export _GEODATA_RES_3=""
        export _MAP_PROJECTION=lambert
        export _E_WE_1=150;  export _E_WE_2=391;  export _E_WE_3=""
        export _E_SN_1=160;  export _E_SN_2=371;  export _E_SN_3=""

        export _DX_1=10000
        export _DY_1=10000
        
        # Spatial resolutions of nests are calculated from parent_grid_ratio.
        # No more necessary.
        export _DX_2=2000; export _DX_3=""
        export _DY_2=2000; export _DY_3=""

        export _REF_LAT=-30.477;   export _REF_LON=-53.302
        export _TRUELAT1=-30.477; export _TRUELAT2=-30.477; export _STAND_LON=-53.302
        
        # 20211223: conf determines the choice of global data (source and/or
        #           resolution and interval)
        GLOBAL_DATE_TIME_INTERVAL=3   # 3 hours
        GLOBAL_DATA=gfs0p25   # GFS_0p50  GFS_0p25   NCEP_WRF_1km
        GLOBAL_DATA_SOURCE="gfs"
                
        # Included to considerer more ratio options
        export _PARENT_RATIO_2=5   # Best values: 3 or 5
        export _PARENT_RATIO_3=""   # Best values: 3 or 5
        
        export  _FEEDBACK=1 # 0 one-way no feedback    1 two-way w/ feedbak (default)
        export  _SMOOTH=2   # Default=2
        
        export _MP_PHYSICS_1=5; export _MP_PHYSICS_2=5;  export _MP_PHYSICS_3=5
        export _BL_PBL_PHYSICS_1=1; export _BL_PBL_PHYSICS_2=1; export _BL_PBL_PHYSICS_3=1
        export _CU_PHYSICS_1=16; _CU_PHYSICS_2=16; _CU_PHYSICS_3=0;
        
        export _E_VERT=42  # Number o vertical levels. The levels are
                           #   automatically calculated (auto_levels_opt=2)
                           #   stretching in lower and in top of the atmosphere.    
       
;;


[cC]) # ********************************************
        CONFIG_NAME="r_sul-SC-2d-high"
        
        export _MAX_DOMAIN=2

        # 20220131: inclusion in this configuration, but can be 
        #             modified.
        export _WRF_TIME_STEP=30    
        
        # 20220131:this is the parameter history_interval of namelist.input (MINUTES)
        #         Frequency at which to write data to the history (wrfout) file. 
        if [ -z ${_T_INTERVAL_OUTPUT_1} ]; then  # Not set by the user
            export _T_INTERVAL_OUTPUT_1=180  ## interval time: 3 h for DOMAIN 1
        fi
        export _T_INTERVAL_OUTPUT_2=60  ## interval time: 1 h for DOMAIN 2
        export _T_INTERVAL_OUTPUT_3=60  ## interval time: 1 h for DOMAIN 3

        
        
        export _PARENT_ID_2=1;  export _PARENT_ID_3=""
        export _I_PARENT_START_2=107 ; export _I_PARENT_START_3=""
        export _J_PARENT_START_2=126 ; export _J_PARENT_START_3=""
        
        export _GEODATA_RES_1=2m; export _GEODATA_RES_2=30s; export _GEODATA_RES_3=""
        export _MAP_PROJECTION=lambert
        export _E_WE_1=298;  export _E_WE_2=751;  export _E_WE_3=""
        export _E_SN_1=277;  export _E_SN_2=516;  export _E_SN_3=""

        export _DX_1=5000
        export _DY_1=5000
        
        # Spatial resolutions of nests are calculated from parent_grid_ratio.
        # No more necessary.
        export _DX_2=1000; export _DX_3=""
        export _DY_2=1000; export _DY_3=""

        export _REF_LAT=-28.921;   export _REF_LON=-53.524
        export _TRUELAT1=-28.921; export _TRUELAT2=-28.921; export _STAND_LON=-53.524
        
        # 20211223: conf determines the choice of global data (source and/or
        #           resolution and interval)
        GLOBAL_DATE_TIME_INTERVAL=3   # 3 hours
        GLOBAL_DATA=gfs0p25   # GFS_0p50  GFS_0p25   NCEP_WRF_1km
        GLOBAL_DATA_SOURCE="gfs"
                
        # Included to considerer more ratio options
        export _PARENT_RATIO_2=5   # Best values: 3 or 5
        export _PARENT_RATIO_3=""   # Best values: 3 or 5
        
        export  _FEEDBACK=1 # 0 one-way no feedback    1 two-way w/ feedbak (default)
        export  _SMOOTH=2   # Default=2
        
        export _MP_PHYSICS_1=5; export _MP_PHYSICS_2=5;  export _MP_PHYSICS_3=5
        export _BL_PBL_PHYSICS_1=1; export _BL_PBL_PHYSICS_2=1; export _BL_PBL_PHYSICS_3=1
        export _CU_PHYSICS_1=16; _CU_PHYSICS_2=0; _CU_PHYSICS_3=0;

        
        export _E_VERT=42  # Number o vertical levels. The levels are
                           #   automatically calculated (auto_levels_opt=2)
                           #   stretching in lower and in top of the atmosphere.   


;;
[dD])
        CONFIG_NAME="santa-catarina-1d-high"
        
        export _MAX_DOMAIN=1

        # 20220131: inclusion in this configuration, but can be 
        #             modified.
        export _WRF_TIME_STEP=6  
        
        # 20220131:this is the parameter history_interval of namelist.input (MINUTES)
        #         Frequency at which to write data to the history (wrfout) file. 
        if [ -z ${_T_INTERVAL_OUTPUT_1} ]; then  # Not set by the user
            export _T_INTERVAL_OUTPUT_1=180  ## interval time: 3 h for DOMAIN 1
        fi
        export _T_INTERVAL_OUTPUT_2=60  ## interval time: 1 h for DOMAIN 2
        export _T_INTERVAL_OUTPUT_3=60  ## interval time: 1 h for DOMAIN 3
  
        
        export _PARENT_ID_2=1;  export _PARENT_ID_3=""
        export _I_PARENT_START_2=107 ; export _I_PARENT_START_3=""
        export _J_PARENT_START_2=126 ; export _J_PARENT_START_3=""
        
        export _GEODATA_RES_1=30s; export _GEODATA_RES_2=30s; export _GEODATA_RES_3=""
        export _MAP_PROJECTION=lambert
        export _E_WE_1=751;  export _E_WE_2="";  export _E_WE_3=""
        export _E_SN_1=511;  export _E_SN_2="";  export _E_SN_3=""

        export _DX_1=1000
        export _DY_1=1000
        
        # Spatial resolutions of nests are calculated from parent_grid_ratio.
        # No more necessary.
        export _DX_2=""; export _DX_3=""
        export _DY_2=""; export _DY_3=""

        export _REF_LAT=-27.322;   export _REF_LON=-51.746
        export _TRUELAT1=-27.322; export _TRUELAT2=-27.322; export _STAND_LON=-51.746
        
        # 20211223: conf determines the choice of global data (source and/or
        #           resolution and interval)
        GLOBAL_DATE_TIME_INTERVAL=1   #  1 hour
        GLOBAL_DATA=cptec_wrf_5km   # GFS_0p50  GFS_0p25   NCEP_WRF_1km
        GLOBAL_DATA_SOURCE="cptec-wrf"
        
        # Included to considerer more ratio options
        export _PARENT_RATIO_2=""   # Best values: 3 or 5
        export _PARENT_RATIO_3=""   # Best values: 3 or 5
        
        export  _FEEDBACK=1 # 0 one-way no feedback    1 two-way w/ feedbak (default)
        export  _SMOOTH=2   # Default=2
        
        export _MP_PHYSICS_1=5; export _MP_PHYSICS_2=5;  export _MP_PHYSICS_3=5
        export _BL_PBL_PHYSICS_1=1; export _BL_PBL_PHYSICS_2=1; export _BL_PBL_PHYSICS_3=1
        export _CU_PHYSICS_1=0; _CU_PHYSICS_2=0; _CU_PHYSICS_3=0
        
        export _E_VERT=42  # Number o vertical levels. The levels are
                           #   automatically calculated (auto_levels_opt=2)
                           #   stretching in lower and in top of the atmosphere.    

       
;;
[eE])
        CONFIG_NAME="santa-catarina-1d-high-small"
        
        export _MAX_DOMAIN=1

        # 20220131: inclusion in this configuration, but can be 
        #             modified.
        export _WRF_TIME_STEP=6  
        
        # 20220131:this is the parameter history_interval of namelist.input (MINUTES)
        #         Frequency at which to write data to the history (wrfout) file. 
        if [ -z ${_T_INTERVAL_OUTPUT_1} ]; then  # Not set by the user
            export _T_INTERVAL_OUTPUT_1=180  ## interval time: 3 h for DOMAIN 1
        fi
        export _T_INTERVAL_OUTPUT_2=60  ## interval time: 1 h for DOMAIN 2
        export _T_INTERVAL_OUTPUT_3=60  ## interval time: 1 h for DOMAIN 3

        
        
        export _PARENT_ID_2="";  export _PARENT_ID_3=""
        export _I_PARENT_START_2="" ; export _I_PARENT_START_3=""
        export _J_PARENT_START_2="" ; export _J_PARENT_START_3=""
        
        export _GEODATA_RES_1=30s; export _GEODATA_RES_2=""; export _GEODATA_RES_3=""
        export _MAP_PROJECTION=lambert
        export _E_WE_1=560;  export _E_WE_2="";  export _E_WE_3=""
        export _E_SN_1=420;  export _E_SN_2="";  export _E_SN_3=""

        export _DX_1=1000
        export _DY_1=1000
        
        # Spatial resolutions of nests are calculated from parent_grid_ratio.
        # No more necessary.
        export _DX_2=""; export _DX_3=""
        export _DY_2=""; export _DY_3=""

        export _REF_LAT=-27.322;   export _REF_LON=-51.2
        export _TRUELAT1=-27.322; export _TRUELAT2=-27.322; export _STAND_LON=-50.768
        
        # 20211223: conf determines the choice of global data (source and/or
        #           resolution and interval)
        GLOBAL_DATE_TIME_INTERVAL=1   # 1 hour
        GLOBAL_DATA=cptec_wrf_5km   # GFS_0p50  GFS_0p25   NCEP_WRF_1km
        GLOBAL_DATA_SOURCE="cptec-wrf"
        
        # Included to considerer more ratio options
        export _PARENT_RATIO_2=""   # Best values: 3 or 5
        export _PARENT_RATIO_3=""   # Best values: 3 or 5
        
        export  _FEEDBACK=1 # 0 one-way no feedback    1 two-way w/ feedbak (default)
        export  _SMOOTH=2   # Default=2
        
        export _MP_PHYSICS_1=5; export _MP_PHYSICS_2=5;  export _MP_PHYSICS_3=5
        export _BL_PBL_PHYSICS_1=1; export _BL_PBL_PHYSICS_2=1; export _BL_PBL_PHYSICS_3=1
        export _CU_PHYSICS_1=0; _CU_PHYSICS_2=0; _CU_PHYSICS_3=0

        
        export _E_VERT=42  # Number o vertical levels. The levels are
                           #   automatically calculated (auto_levels_opt=2)
                           #   stretching in lower and in top of the atmosphere.    

;;
[fF])
        CONFIG_NAME="santa-catarina-1d-low-small"
        
        export _MAX_DOMAIN=1

        # 20220131: inclusion in this configuration, but can be 
        #             modified.
        export _WRF_TIME_STEP=12
        
        # 20220131:this is the parameter history_interval of namelist.input (MINUTES)
        #         Frequency at which to write data to the history (wrfout) file. 
        if [ -z ${_T_INTERVAL_OUTPUT_1} ]; then  # Not set by the user
            export _T_INTERVAL_OUTPUT_1=180  ## interval time: 3 h for DOMAIN 1
        fi
        export _T_INTERVAL_OUTPUT_2=60  ## interval time: 1 h for DOMAIN 2
        export _T_INTERVAL_OUTPUT_3=60  ## interval time: 1 h for DOMAIN 3

        
        
        export _PARENT_ID_2="";  export _PARENT_ID_3=""
        export _I_PARENT_START_2="" ; export _I_PARENT_START_3=""
        export _J_PARENT_START_2="" ; export _J_PARENT_START_3=""
        
        export _GEODATA_RES_1=30s; export _GEODATA_RES_2=30s; export _GEODATA_RES_3=""
        export _MAP_PROJECTION=lambert
        export _E_WE_1=370;  export _E_WE_2="";  export _E_WE_3=""
        export _E_SN_1=250;  export _E_SN_2="";  export _E_SN_3=""

        export _DX_1=2000
        export _DY_1=2000
        
        # Spatial resolutions of nests are calculated from parent_grid_ratio.
        # No more necessary.
        export _DX_2=""; export _DX_3=""
        export _DY_2=""; export _DY_3=""

        export _REF_LAT=-27.322;   export _REF_LON=-51.746
        export _TRUELAT1=-27.322; export _TRUELAT2=-27.322; export _STAND_LON=-51.124
        
        # 20211223: conf determines the choice of global data (source and/or
        #           resolution and interval)
        GLOBAL_DATE_TIME_INTERVAL=1   # 1 hour
        GLOBAL_DATA=cptec_wrf_5km   # GFS_0p50  GFS_0p25   NCEP_WRF_1km
        GLOBAL_DATA_SOURCE="cptec-wrf"
        
        # Included to considerer more ratio options
        export _PARENT_RATIO_2=""   # Best values: 3 or 5
        export _PARENT_RATIO_3=""   # Best values: 3 or 5
        
        export  _FEEDBACK=1 # 0 one-way no feedback    1 two-way w/ feedbak (default)
        export  _SMOOTH=2   # Default=2
        
        export _MP_PHYSICS_1=5; export _MP_PHYSICS_2=5;  export _MP_PHYSICS_3=5
        export _BL_PBL_PHYSICS_1=1; export _BL_PBL_PHYSICS_2=1; export _BL_PBL_PHYSICS_3=1
        export _CU_PHYSICS_1=0; _CU_PHYSICS_2=0; _CU_PHYSICS_3=0

        
        export _E_VERT=42  # Number o vertical levels. The levels are
                           #   automatically calculated (auto_levels_opt=2)
                           #   stretching in lower and in top of the atmosphere.  


;;

[gG]) # ****************************
        CONFIG_NAME="r_sudeste-SP-MG-PR-MS-2d"
        
        export _MAX_DOMAIN=2

        # 20220131: inclusion in this configuration, but can be 
        #             modified.
        export _WRF_TIME_STEP=60
        
        # 20220131:this is the parameter history_interval of namelist.input (MINUTES)
        #         Frequency at which to write data to the history (wrfout) file. 
        if [ -z ${_T_INTERVAL_OUTPUT_1} ]; then  # Not set by the user
            export _T_INTERVAL_OUTPUT_1=180  ## interval time: 3 h for DOMAIN 1
        fi
        export _T_INTERVAL_OUTPUT_2=60  ## interval time: 1 h for DOMAIN 2
        export _T_INTERVAL_OUTPUT_3=60  ## interval time: 1 h for DOMAIN 3       
        
        export _PARENT_ID_2=1;  export _PARENT_ID_3=""
        export _I_PARENT_START_2=38 ; export _I_PARENT_START_3=""
        export _J_PARENT_START_2=45 ; export _J_PARENT_START_3=""
        
        export _GEODATA_RES_1=2m; export _GEODATA_RES_2=30s; export _GEODATA_RES_3=""
        export _MAP_PROJECTION=lambert
        export _E_WE_1=150;  export _E_WE_2=381;  export _E_WE_3=""
        export _E_SN_1=160;  export _E_SN_2=361;  export _E_SN_3=""

        export _DX_1=10000
        export _DY_1=10000
        
        # Spatial resolutions of nests are calculated from parent_grid_ratio.
        # No more necessary.
        export _DX_2=2000; export _DX_3=""
        export _DY_2=2000; export _DY_3=""

        export _REF_LAT=-22.3;   export _REF_LON=-49
        export _TRUELAT1=-22.3; export _TRUELAT2=-22.3; export _STAND_LON=-49.791
        
        # 20211223: conf determines the choice of global data (source and/or
        #           resolution and interval)
        GLOBAL_DATE_TIME_INTERVAL=3    # 3 hours
        GLOBAL_DATA=gfs0p25   # GFS_0p50  GFS_0p25   NCEP_WRF_1km
        GLOBAL_DATA_SOURCE="gfs"
                
        # Included to considerer more ratio options
        export _PARENT_RATIO_2=5   # Best values: 3 or 5
        export _PARENT_RATIO_3=""   # Best values: 3 or 5
        
        export  _FEEDBACK=1 # 0 one-way no feedback    1 two-way w/ feedbak (default)
        export  _SMOOTH=2   # Default=2
        
        export _MP_PHYSICS_1=5; export _MP_PHYSICS_2=5;  export _MP_PHYSICS_3=5
        export _BL_PBL_PHYSICS_1=1; export _BL_PBL_PHYSICS_2=1; export _BL_PBL_PHYSICS_3=1
        export _CU_PHYSICS_1=16; _CU_PHYSICS_2=0; _CU_PHYSICS_3=0

        
        export _E_VERT=42  # Number o vertical levels. The levels are
                           #   automatically calculated (auto_levels_opt=2)
                           #   stretching in lower and in top of the atmosphere.    
       
;;

[hH]) # Área de Sao Paulo
      # 3 domínios: AS -> região Sudeste (Brasil) -> litoral São Paulo
        CONFIG_NAME="sao-paulo-sjcampos"
        
        export _MAX_DOMAIN=3

        # 20220131: inclusion in this configuration, but can be 
        #             modified.
        export _WRF_TIME_STEP=216
        
        # 20220131:this is the parameter history_interval of namelist.input (MINUTES)
        #         Frequency at which to write data to the history (wrfout) file. 
        if [ -z ${_T_INTERVAL_OUTPUT_1} ]; then  # Not set by the user
            export _T_INTERVAL_OUTPUT_1=180  ## interval time: 3 h for DOMAIN 1
        fi
        export _T_INTERVAL_OUTPUT_2=60  ## interval time: 1 h for DOMAIN 2
        export _T_INTERVAL_OUTPUT_3=60  ## interval time: 1 h for DOMAIN 3

        
        
        export _PARENT_ID_2=1;  export _PARENT_ID_3=2
        export _I_PARENT_START_2=54 ; export _I_PARENT_START_3=54
        export _J_PARENT_START_2=63 ; export _J_PARENT_START_3=62
        
        export _GEODATA_RES_1=10m; export _GEODATA_RES_2=2m; export _GEODATA_RES_3=30s
        export _MAP_PROJECTION=lambert
        export _E_WE_1=166;  export _E_WE_2=166;  export _E_WE_3=163
        export _E_SN_1=188;  export _E_SN_2=190;  export _E_SN_3=190

        export _DX_1=36000
        export _DY_1=36000
        
        # Spatial resolutions of nests are calculated from parent_grid_ratio.
        # No more necessary.
        export _DX_2=12000; export _DX_3=4000
        export _DY_2=12000; export _DY_3=4000

        export _REF_LAT=-23.33;  export _REF_LON=-44.8
        export _TRUELAT1=-22.522; export _TRUELAT2=-22.522; export _STAND_LON=-44.902
        
        # 20211223: conf determines the choice of global data (source and/or
        #           resolution and interval)
        GLOBAL_DATE_TIME_INTERVAL=3    # 3 hours
        GLOBAL_DATA=gfs0p25   # GFS_0p50  GFS_0p25   NCEP_WRF_1km
        GLOBAL_DATA_SOURCE="gfs"
        
        # Included to considerer more ratio options
        export _PARENT_RATIO_2=3   # Best values: 3 or 5
        export _PARENT_RATIO_3=3   # Best values: 3 or 5
        
        export  _FEEDBACK=1 # 0 one-way no feedback    1 two-way w/ feedbak (default)
        export  _SMOOTH=2   # Default=2
        
        export _MP_PHYSICS_1=5; export _MP_PHYSICS_2=5;  export _MP_PHYSICS_3=5
        export _BL_PBL_PHYSICS_1=1; export _BL_PBL_PHYSICS_2=1; export _BL_PBL_PHYSICS_3=1
        export _CU_PHYSICS_1=16; _CU_PHYSICS_2=16; _CU_PHYSICS_3=16;

        
        export _E_VERT=42  # Number o vertical levels. The levels are
                           #   automatically calculated (auto_levels_opt=2)
                           #   stretching in lower and in top of the atmosphere.    

    
;;
[iI]) # América do Sul -> Maranhão
        CONFIG_NAME="americasul-r_norte-MA-3d"       

        export _MAX_DOMAIN=3

        # 20220131: inclusion in this configuration, but can be 
        #             modified.
        export _WRF_TIME_STEP=162
        
        # 20220131:this is the parameter history_interval of namelist.input (MINUTES)
        #         Frequency at which to write data to the history (wrfout) file. 
        if [ -z ${_T_INTERVAL_OUTPUT_1} ]; then  # Not set by the user
            export _T_INTERVAL_OUTPUT_1=180  ## interval time: 3 h for DOMAIN 1
        fi
        export _T_INTERVAL_OUTPUT_2=60  ## interval time: 1 h for DOMAIN 2
        export _T_INTERVAL_OUTPUT_3=60  ## interval time: 1 h for DOMAIN 3
        
        export _PARENT_ID_2=1;  export _PARENT_ID_3=2
        export _I_PARENT_START_2=58 ; export _I_PARENT_START_3=54
        export _J_PARENT_START_2=65 ; export _J_PARENT_START_3=62
        
        export _GEODATA_RES_1=10m; export _GEODATA_RES_2=2m; export _GEODATA_RES_3=30s
        export _MAP_PROJECTION=mercator
        export _E_WE_1=166;  export _E_WE_2=154;  export _E_WE_3=142
        export _E_SN_1=188;  export _E_SN_2=178;  export _E_SN_3=166

        export _DX_1=27000
        export _DY_1=27000
        
        # Spatial resolutions of nests are calculated from parent_grid_ratio.
        # No more necessary.
        export _DX_2=9000; export _DX_3=3000
        export _DY_2=9000; export _DY_3=3000

        export _REF_LAT=-2.5;  export _REF_LON=-44.5
        export _TRUELAT1=-2.5; export _TRUELAT2=0; export _STAND_LON=-44.547
        
        # 20211223: conf determines the choice of global data (source and/or
        #           resolution and interval)
        GLOBAL_DATE_TIME_INTERVAL=3    # 3 hours
        GLOBAL_DATA=gfs0p25   # GFS_0p50  GFS_0p25   NCEP_WRF_1km
        GLOBAL_DATA_SOURCE="gfs"
        
        # Included to considerer more ratio options
        export _PARENT_RATIO_2=3   # Best values: 3 or 5
        export _PARENT_RATIO_3=3   # Best values: 3 or 5
        
        export  _FEEDBACK=1 # 0 one-way no feedback    1 two-way w/ feedbak (default)
        export  _SMOOTH=2   # Default=2
        
        export _MP_PHYSICS_1=5; export _MP_PHYSICS_2=5;  export _MP_PHYSICS_3=5
        export _BL_PBL_PHYSICS_1=1; export _BL_PBL_PHYSICS_2=1; export _BL_PBL_PHYSICS_3=1
        export _CU_PHYSICS_1=16; _CU_PHYSICS_2=16; _CU_PHYSICS_3=16;

        
        export _E_VERT=42  # Number o vertical levels. The levels are
                           #   automatically calculated (auto_levels_opt=2)
                           #   stretching in lower and in top of the atmosphere.    

;;

[jJ]) # Regiões Norte e Nordeste -> Maranhão
        CONFIG_NAME="r_norte-r_nordeste-MA-2d-low"
        
        export _MAX_DOMAIN=2

        # 20220131: inclusion in this configuration, but can be 
        #             modified.
        export _WRF_TIME_STEP=216  
        
        # 20220131:this is the parameter history_interval of namelist.input (MINUTES)
        #         Frequency at which to write data to the history (wrfout) file. 
        if [ -z ${_T_INTERVAL_OUTPUT_1} ]; then  # Not set by the user
            export _T_INTERVAL_OUTPUT_1=180  ## interval time: 3 h for DOMAIN 1
        fi
        export _T_INTERVAL_OUTPUT_2=60  ## interval time: 1 h for DOMAIN 2
        export _T_INTERVAL_OUTPUT_3=60  ## interval time: 1 h for DOMAIN 3
   
        
        export _PARENT_ID_2=1;  export _PARENT_ID_3=""
        export _I_PARENT_START_2=40 ; export _I_PARENT_START_3=""
        export _J_PARENT_START_2=32 ; export _J_PARENT_START_3=""
        
        export _GEODATA_RES_1=10m; export _GEODATA_RES_2=5m; export _GEODATA_RES_3=""
        export _MAP_PROJECTION=mercartor
        export _E_WE_1=100;  export _E_WE_2=64;  export _E_WE_3=""
        export _E_SN_1=80;  export _E_SN_2=49;  export _E_SN_3=""

        export _DX_1=36000
        export _DY_1=36000
        
        # Spatial resolutions of nests are calculated from parent_grid_ratio.
        # No more necessary.
        export _DX_2=12000; export _DX_3=""
        export _DY_2=12000; export _DY_3=""

        export _REF_LAT=-2.5;   export _REF_LON=-44.5
        export _TRUELAT1=-3.857; export _TRUELAT2=0; export _STAND_LON=-46.147
        
        # 20211223: conf determines the choice of global data (source and/or
        #           resolution and interval)
        GLOBAL_DATE_TIME_INTERVAL=3    # 3 hours
        GLOBAL_DATA=gfs0p25   # GFS_0p50  GFS_0p25   NCEP_WRF_1km
        GLOBAL_DATA_SOURCE="gfs"
                
        # Included to considerer more ratio options
        export _PARENT_RATIO_2=3   # Best values: 3 or 5
        export _PARENT_RATIO_3=""   # Best values: 3 or 5
        
        export  _FEEDBACK=1 # 0 one-way no feedback    1 two-way w/ feedbak (default)
        export  _SMOOTH=2   # Default=2
        
        export _MP_PHYSICS_1=5; export _MP_PHYSICS_2=5;  export _MP_PHYSICS_3=5
        export _BL_PBL_PHYSICS_1=1; export _BL_PBL_PHYSICS_2=1; export _BL_PBL_PHYSICS_3=1
        export _CU_PHYSICS_1=16; _CU_PHYSICS_2=16; _CU_PHYSICS_3=0;
        
        export _E_VERT=42  # Number o vertical levels. The levels are
                           #   automatically calculated (auto_levels_opt=2)
                           #   stretching in lower and in top of the atmosphere.   

;; 


[kK]) # Alcântara
        CONFIG_NAME="r_norte-MA-2d-high"
        
        export _MAX_DOMAIN=2

        # 20220131: inclusion in this configuration, but can be 
        #             modified.
        export _WRF_TIME_STEP=108    
        
        # 20220131:this is the parameter history_interval of namelist.input (MINUTES)
        #         Frequency at which to write data to the history (wrfout) file. 
        if [ -z ${_T_INTERVAL_OUTPUT_1} ]; then  # Not set by the user
            export _T_INTERVAL_OUTPUT_1=180  ## interval time: 3 h for DOMAIN 1
        fi
        export _T_INTERVAL_OUTPUT_2=60  ## interval time: 1 h for DOMAIN 2
        export _T_INTERVAL_OUTPUT_3=60  ## interval time: 1 h for DOMAIN 3
   
        
        export _PARENT_ID_2=1;  export _PARENT_ID_3=""
        export _I_PARENT_START_2=40 ; export _I_PARENT_START_3=""
        export _J_PARENT_START_2=33 ; export _J_PARENT_START_3=""
        
        export _GEODATA_RES_1=5m; export _GEODATA_RES_2=2m; export _GEODATA_RES_3=""
        export _MAP_PROJECTION=mercartor
        export _E_WE_1=100;  export _E_WE_2=64;  export _E_WE_3=""
        export _E_SN_1=80;  export _E_SN_2=49;  export _E_SN_3=""

        export _DX_1=18000
        export _DY_1=18000
        
        # Spatial resolutions of nests are calculated from parent_grid_ratio.
        # No more necessary.
        export _DX_2=6000; export _DX_3=""
        export _DY_2=6000; export _DY_3=""

        export _REF_LAT=-2.5;   export _REF_LON=-44.5
        export _TRUELAT1=-2.613; export _TRUELAT2=0; export _STAND_LON=-44.014
        
        # 20211223: conf determines the choice of global data (source and/or
        #           resolution and interval)
        GLOBAL_DATE_TIME_INTERVAL=3    # 3 hours
        GLOBAL_DATA=gfs0p25   # GFS_0p50  GFS_0p25   NCEP_WRF_1km
        GLOBAL_DATA_SOURCE="gfs"
                
        # Included to considerer more ratio options
        export _PARENT_RATIO_2=3   # Best values: 3 or 5
        export _PARENT_RATIO_3=""   # Best values: 3 or 5
        
        export  _FEEDBACK=1 # 0 one-way no feedback    1 two-way w/ feedbak (default)
        export  _SMOOTH=2   # Default=2
        
        export _MP_PHYSICS_1=5; export _MP_PHYSICS_2=5;  export _MP_PHYSICS_3=5
        export _BL_PBL_PHYSICS_1=1; export _BL_PBL_PHYSICS_2=1; export _BL_PBL_PHYSICS_3=1
        export _CU_PHYSICS_1=16; _CU_PHYSICS_2=16; _CU_PHYSICS_3=0;

        
        export _E_VERT=42  # Number o vertical levels. The levels are
                           #   automatically calculated (auto_levels_opt=2)
                           #   stretching in lower and in top of the atmosphere.   

;;




[lL]) # 3 domains - South America - Sãoo Paulo - São José dos Campos 
        CONFIG_NAME="americasul-r_sudeste-SP-sjcampos-3d"
        
        export _MAX_DOMAIN=3
        export _WRF_TIME_STEP=216
        if [ -z ${_T_INTERVAL_OUTPUT_1} ]; then  # Not set by the user
            export _T_INTERVAL_OUTPUT_1=180  ## interval time: 3 h for DOMAIN 1
        fi
        export _T_INTERVAL_OUTPUT_2=60  ## interval time: 1 h for DOMAIN 2
        export _T_INTERVAL_OUTPUT_3=60  ## interval time: 1 h for DOMAIN 3
       
        export _PARENT_ID_2=1;  export _PARENT_ID_3=2
        export _I_PARENT_START_2=54 ; export _I_PARENT_START_3=54
        export _J_PARENT_START_2=63 ; export _J_PARENT_START_3=62
        
        export _GEODATA_RES_1=10m; export _GEODATA_RES_2=2m; export _GEODATA_RES_3=30s
        export _MAP_PROJECTION=lambert
        export _E_WE_1=166;  export _E_WE_2=166;  export _E_WE_3=163
        export _E_SN_1=188;  export _E_SN_2=190;  export _E_SN_3=190

        export _DX_1=36000
        export _DY_1=36000
        
        export _DX_2=12000
        export _DY_2=12000
        
        export _DX_3=4000
        export _DY_3=4000

        export _REF_LAT=-23.33;  export _REF_LON=-44.8
        export _TRUELAT1=-22.522; export _TRUELAT2=-22.522; export _STAND_LON=-44.902
        
        GLOBAL_DATE_TIME_INTERVAL=3
        GLOBAL_DATA=gfs0p25
        GLOBAL_DATA_SOURCE="gfs"
        
        export _PARENT_RATIO_2=3
        export _PARENT_RATIO_3=3
        
        export  _FEEDBACK=0
        export  _SMOOTH=2
        
        export _MP_PHYSICS_1=5; export _MP_PHYSICS_2=5;  export _MP_PHYSICS_3=5
        export _BL_PBL_PHYSICS_1=1; export _BL_PBL_PHYSICS_2=1; export _BL_PBL_PHYSICS_3=1
        export _CU_PHYSICS_1=16; _CU_PHYSICS_2=16; _CU_PHYSICS_3=16;
        export _E_VERT=42

;;


    *) echo "Não válida ..."
    esac
    
    NUM_PARAM=$(( $NUM_PARAM + 1))
    
    return 0    
}


# ##############################################################################




# Função para configurar as variáveis de TEMPO e calcular DATAS
# Em 18out2021: considerando a versão do namelist da v WRF 4.3, a data
#   final é obtida pelo próprio programa através de: DATA_INICIAL + run_hours
# 20220203: the code real.exe expects ENDING information in the namelist.input 

function t_calcular_data_hora_final
{
   
    START_YEAR=$1
    START_MONTH=$2
    START_DAY=$3
    START_HOUR=$4    
    
    END_HOUR=$4
    END_DAY=$3
    END_MONTH=$2
    END_YEAR=$1

    # 20220203: ERROR for this type of construction
    # RESULT=$(( ${START_DAY} + 1 )) when START_DAY=(08|09)
    # bash: 05 + 09: value too great for base (error token is "09")
    # Again, attention: When a numerical format expects a number, the internal printf-command
    #   will use the common Bash arithmetic rules regarding the base. A command like the
    #   following example will throw an error, since 08 is not a valid octal number (00 to 07!):printf '%d\n' 08
    # SOLUTION: use expr

    declare -i RESULT
    
    if [ x"${RUN_TIME_HOURS}" = x"24" ]
    then
        RESULT=$( expr ${START_DAY} + 1 )
        END_DAY=$(printf %02d $RESULT)
    fi
        
    if [ x"${RUN_TIME_HOURS}" = x"48" ]
    then
        RESULT=$( expr ${START_DAY} + 2 )
        END_DAY=$(printf %02d $RESULT)
    fi
        

    if [ x"${RUN_TIME_HOURS}" = x"72" ]
    then
        RESULT=$( expr ${START_DAY} + 3 )
        END_DAY=$(printf %02d $RESULT)
    fi

    # Month: FEBRUARY
    # LEAP YEAR:
    RESULT=$( expr ${START_YEAR} % 4 )
    LEAP="no"
    [ $RESULT -eq 0 ] && LEAP="yes"
    
    if [ x"${START_MONTH}" = x"02" ] && [ ${LEAP} == "yes" ]; then
        [ "${END_DAY}" -eq 29 ] && END_MONTH="02"
        [ "${END_DAY}" -gt 30 ] && END_MONTH="03"
    elif [ x"${START_MONTH}" = x"02" ] && [ ${LEAP} == "no" ]; then        
        [ "${END_DAY}" -ge 29 ] && END_MONTH="03"
        END_DAY=$(printf %02d 01)
    fi

    # Month (30 days): april, june, september, november
    if [ x"${START_MONTH}" = x"04" -o x"${START_MONTH}" = x"06" -o x"${START_MONTH}" = x"09" -o x"${START_MONTH}" = x"11" ]; then 
        if [ ${END_DAY} -ge 31 ]; then
            RESULT=$( expr ${START_MONTH} + 1 )
            END_MONTH=$(printf %02d ${RESULT})
            
            RESULT=$( expr ${END_DAY} - 30 )
            END_DAY=$(printf %02d $RESULT)
        fi
    fi

    # Month (31 days): january, march, may, july, august, october
    if [ x"${START_MONTH}" = x"01" -o x"${START_MONTH}" = x"03" -o x"${START_MONTH}" = x"05" -o x"${START_MONTH}" = x"07" -o  x"${START_MONTH}" = x"08" -o x"${START_MONTH}" = x"10" ]; then
        if [ ${END_DAY} -ge 32 ]; then
            RESULT=$( expr ${START_MONTH} + 1 )
            END_MONTH=$(printf %02d ${RESULT})
            
            RESULT=$( expr ${START_DAY} - 31 )
            END_DAY=$(printf %02d $RESULT)
        fi
    fi    


    # Month (31 days): december
    if [ x"${START_MONTH}" = x"12" ]; then
        if [ ${START_DAY} -ge 32 ]; then
            RESULT=$( expr ${START_YEAR} + 1 )
            END_YEAR=$(printf %02d $RESULT)

            END_MONTH="01"

            RESULT=$( expr ${START_DAY} - 31 )
            END_DAY=$(printf %02d $RESULT)
        fi
    fi    
    
#    unset I_START_YEAR I_START_MONTH I_START_DAY I_START_HOUR
    unset RESULT

}
# FIM: função t_calcular_data_hora_final


################################################################################
################################################################################
#
#                     FUNÇÕES DE INICIALIZAÇÃO
#
################################################################################
################################################################################

# if this script is run through cron, then it will be automatic
# TODO this is not yet implemented
if [ $DH_HOW_RUN_SCRIPT = "AUTOMATIC" ]; then
    # HOUR=$1 ideally, this information need to be passed via command line
    #         parameter
    HOUR=12
    YEAR=`date +%Y` ; MONTH=`date +%m` ; DAY=`date +%d`
    START_YEAR=$YEAR ; START_MONTH=$MONTH ; START_DAY=$DAY ; START_HOUR=$HOUR
    opcoes_rodada
fi



# Em 15ago10: inclusão variáveis _IMVDIF e _ISOIL. O padrão permite
#             PBL 2 (Blackada) e 5 (MRF)
inicializa_opcoes_wrf () {
	export _CUMULUS_D1=3 ; export _CUMULUS_D2=3 ; export _CUMULUS_D3=1
	export _PBL_D1=5; export _PBL_D2=5; export _PBL_D3=5
	export _IMVDIF=1; export _ISOIL=1
	export _MKX=31 ; export MKX=31
	export COMPILADOR=GFORTRAN
	export FORMATO_DADOS=GRIB2
}

inicializacao_interativa () {

      echo '********************************'
      echo 'Rodando Modelo Numerico Regional'
      echo '********************************'
      echo 'Escolha a configuracao de grade predefinida:'
#      echo ' A - Centro da AS (90x90-36km) RSeSC (91x97-12km) Regiao Metropolitana (100x106-4km)' 
#       echo ' b - Conf.UM - RSeSC (90x95-12km) Regiao Metropolitana (100x100-4km)'
#       echo ' c - Conf.DOIS - Centro da America Sul (220x220-18km) RS/SC (202x202-6km)'
#      echo ' D - America do Sul (220x220-18km) Sao Paulo (202x202-6km)'
      echo ' L - Regiao SUL (90x90-18km) Leste de RS/SC/PR (133x133-6km)'
# 
#       echo ' e - Conf.QUATRO - Centro da America Sul (90x90-36km) RS (67x70-12km)'
#       echo ' f - Conf.CINCO - Centro e Sul do Brasil (90x90-36km) V.Paraiba (67x70-12km)'
#       echo ' g - Conf.SEIS - America do Sul (95x95-90km) Sao Paulo (67x70-30km)'
#       echo ' h - Conf.SETE - Regioes N e NE (90x95-45km) Nordeste (70x70-15km)'
#       echo ' i - Conf.OITO - Regiao NORTE (120x120-36km) Manaus (103x103-12km)'
#       echo ' j - Conf NOVE - America do Sul (220x220-18km) Sao Paulo (202x202-6km)'
#       echo ' d - Conf.TRES - America do Sul (135x135-36km) Regiao Norte - "Cabeca do Cachorro" (151x151-12km)'
      echo ' x - Sair'
      echo -n ' Escolha a opcao: '
      read resposta
      case $resposta in
	      [aA]) CONFIG=A; export _WRF_TIME_STEP=216 ; inicializa_opcoes_wrf ;;
	      [bB]) CONFIG=B; export _WRF_TIME_STEP=45 ; inicializa_opcoes_wrf ;;
	      [cC]) CONFIG=C; export _WRF_TIME_STEP=45 ; inicializa_opcoes_wrf ;;
	      [dD]) CONFIG=D; export _WRF_TIME_STEP=90 ; inicializa_opcoes_wrf ;;
	      [eE]) CONFIG=E; export _WRF_TIME_STEP=90 ; inicializa_opcoes_wrf ;;
	      [fF]) CONFIG=F; export _WRF_TIME_STEP=90 ; inicializa_opcoes_wrf ;;
	      [gG]) CONFIG=G; export _WRF_TIME_STEP=90 ; inicializa_opcoes_wrf ;;
	      [hH]) CONFIG=H; export _WRF_TIME_STEP=90 ; inicializa_opcoes_wrf ;;
	      [iI]) CONFIG=I; export _WRF_TIME_STEP=90 ; inicializa_opcoes_wrf ;;
	      [jJ]) CONFIG=J; export _WRF_TIME_STEP=90 ; inicializa_opcoes_wrf ;;
	      [kK]) CONFIG=K; export _WRF_TIME_STEP=45 ; inicializa_opcoes_wrf ;;
	      [lL]) CONFIG=L; export _WRF_TIME_STEP=108 ; inicializa_opcoes_wrf ;;
	      [xX]) shutdown_execution "Saindo ..." 0 ;;
	      *) shutdown_execution "Opcao desconhecida. Saindo ..." ;;
      esac


      echo -e "\nEscolha de TISTEP "
      echo " O valor de TISTEP padrao e: $_WRF_TIME_STEP "
      read -p ' Deseja modifica-lo (s/n): ' resposta
      if [ $resposta = s ]; then
	      echo -n " Entre com o valor (3*dx): "
	      read resposta
	      _WRF_TIME_STEP=$resposta
	      export _WRF_TIME_STEP
      fi

###########################################################
# Em 03jun2021: agora essa informação será passada como
#      opção de linha de comando (parametrizada)
#	      1) RUN_TIME_HOURS=24; export _TIMAX=1440 ;;
#	      2) RUN_TIME_HOURS=48; export _TIMAX=2880 ;;
#	      3) RUN_TIME_HOURS=72; export _TIMAX=4320 ;;
###########################################################

###########################################################
# Em 03jun2021: agora essa informação será ajustada no início
#      e também na função opcoes_rodada
#	      1) COMPILADOR=PGI ;;
#	      2) COMPILADOR=INTEL ;;
#	      3) COMPILADOR=GFORTRAN ;;
###########################################################

} # termino funcao inicializacao

opcoes_rodada () {
      CONFIG=a; export _WRF_TIME_STEP=216 ; inicializa_opcoes_wrf
      export _MKX=31 ; export MKX=31
      # Grell=3
      export _CUMULUS_D1=3 ; export _CUMULUS_D2=3 ; export _CUMULUS_D3=3
      # 5=MRF
      export _PBL_D1=5 ; export _PBL_D2=5 ; export _PBL_D3=5
      RUN_TIME_HOURS=24; export _TIMAX=1440
	  FORMATO_DADOS=GRIB2
	  COMPILADOR=GFORTRAN
}



# #############################################################
#  The next 2 functions are used to found the NEXT CONFIGURATION
# #############################################################

# -------------------------------------------------------------
#  Function: verifica a última configuração executada: DIR_DADOS_GFS/wrf-CONTADOR
#         Permite que, para uma mesma data, possam ser executados diferentes domínios e 
#         diferentes configurações (física, pex).
# Em 02jan22: the configuration of output changed
#   DIR_DOMAIN_OUTPUT=yyyy-mm-dd-HH_dom_[A-Z]-["short name of config domain"]
#   DIR_WRF_OUTPUT=${DIR_DATA_OUTPUT}/${DIR_DOMAIN_OUTPUT}/wrf-[a-z]
# -------------------------------------------------------------
f_last_completed_configuration ()
{
    # cd ${DIR_DATA_OUTPUT}${DIR_DOMAIN_OUTPUT}
    [ -d ${DIR_DATA_OUTPUT}/${1} ] && cd ${DIR_DATA_OUTPUT}/${1}
    
    LISTA=$(ls -d wrf-[a-z] 2>/dev/null)
    # If it is empty (no execution yet)
    if [ $? -ne 0 ]; then
        VAL_LAST_LETTER_CONF=a        
    # There were some (one or more executions)    
    else
        LISTA=$(echo $LISTA | sort)
        for i in $LISTA; do
            VALOR=$(echo $i | cut -d'-' -f 2)
            # =~ : test ( or [[ ]]) command uses regex to make comparisons
            if [[ $VALOR =~ [[:lower:]] ]]; then
                echo "Valor = $VALOR"
                VAL_LAST_LETTER_CONF=$VALOR
            fi
        done
        cd -  # volta para diretório anterior
        # DEBUG
        f_debug $0 "Value of Last Letter Executed" $VAL_LAST_LETTER_CONF
    fi
}


# -------------------------------------------------------------
#  Function: set the output DIR VAR: DIR_WRF_OUTPUT
# -------------------------------------------------------------
# Em 02jan22: this function will set the next run config for THE SAME DOMAIN CONFIG
#             The aim is to have different directories for different physical
#             configurations for the same domain/initial date-hour configuration.
#   DIR_DOMAIN_OUTPUT=yyyy-mm-dd-HH_dom_[A-Z]-["short name of config domain"]
#   DIR_WRF_OUTPUT=${DIR_DATA_OUTPUT}/${DIR_DOMAIN_OUTPUT}/wrf-[a-z]
f_find_next_execution_round  ()
{
        # Diretorio com os dados de saida do modelo (grade) corrente.
        #ultima_configuracao
        f_last_completed_configuration $1
        
        # Em 02jan22: dir changed
        #  DIR_WRF_OUTPUT=DIR_DATA_OUTPUT/DIR_DOMAIN_OUTPUT/wrf-[a-z]
        #  DIR_WRF_OUTPUT=model-data-output/2021-12-31-12_dom_A-regiao-sul/wrf-[a-z]
        DIR_WRF_OUTPUT=${DIR_DATA_OUTPUT}/${DIR_DOMAIN_OUTPUT}/wrf-${VAL_LAST_LETTER_CONF}
        
        # echo "Ultima configuracao executada: DIR_WRF_OUTPUT=${DIR_WRF_OUTPUT}"

        # Now, we will test if it contains the log file and if the execution
        #      finished with success.
        if [ -d ${DIR_WRF_OUTPUT} ]; then
            status=$(cat $DIR_WRF_OUTPUT/status-current-configuration.log)
        else 
            status=2
        fi 

        # Valores para status:
        # 0 = diretório já existe e a rodada foi completada
        # 1 = diretório já existe e a rodada não foi completada com sucesso
        # 2 = diretório não existe ainda

        # echo "status = $status"
        
        # Obtain the next letter for the next round
        # If $USE_STATIC_NAMELIST_FILES == "yes" we also need new output dir.
        if [ $status -eq 0 ] || [ x$2 == x"yes" ] ; then
            echo "Configuração anterior executada com SUCESSO"
            ASCII_ORD=$(echo ${VAL_LAST_LETTER_CONF} | tr -d "\n" | od -An -t uC)
            ASCII_ORD=$(( $ASCII_ORD + 1 ))
            NEXT_LETTER=$( printf "\U$(printf %08x $ASCII_ORD)" )
            DIR_WRF_OUTPUT=${DIR_DATA_OUTPUT}/${DIR_DOMAIN_OUTPUT}/wrf-${NEXT_LETTER}
            
            mensagem "Next round: DIR_WRF_OUTPUT=${DIR_WRF_OUTPUT}"
            return 0
        fi
        
        # Or, the same round will be re-executed, with the same configuration
        if [ $status -eq 1 ]; then
            mensagem "Configuração anterior com ERRO. Executar com mesmas configurações."
            return 1
        fi
        
       if [ $status -eq 2 ]; then
            mensagem "Next round: DIR_WRF_OUTPUT=${DIR_WRF_OUTPUT}"
            return 0
        fi
}






################################################################################
################################################################################
#
#          START of PROCESSING
#
################################################################################
################################################################################


## DEBUG
f_debug $0 "About OS" "$(uname -a)"



#  
# MANDATORY parameters: conf ts ti (NUM_ARGUMENTOS=3)
#   ./runwrf.sh -conf A -ts 2021-06-10-00 -ti 24 -gd gfs0p25 -gtr 6
#   gd: gfs1p00 | gfs0p50 | gfs0p25 | cptec_wrf_5km
#   gtr: 3 or 6 hours

# O shell interpreta cada elemento como um argumento,
#    logo, número total são seis $#=6 ($0 é o comando)

## DEBUG
f_debug $0 "Number of parameters" $#

let result=$(($NUM_ARGUMENTOS * 2))

# Verifica número de argumentos: deve ser maior que o mínimo obrigatorio
if [ $# -lt $result ]; then
     help
fi

# Before process user parameters, we need check something
# Test for ncdump ($NETCDF/bin/ncdump): this program is used
#  to extract the number of levels from output of metgrid.exe
/usr/bin/file --mime $NETCDF/bin/ncdump | grep binary
[[ $? -eq 0 ]] && NCDUMP=$NETCDF/bin/ncdump || shutdown_execution "ERROR: the program ncdump not found." 1
f_debug $0 "We will use the ncdump in: " $NCDUMP



# ===============================================================
#  Funcao para extracao de PARAMETROS da linha de comando 
# ===============================================================
while [ "$1" != "" ]; do
    case $1 in
        -conf )                 shift
                                [[ ! -z $1 ]] && param=$1 || ajuda
                                [[ "${1}" =~ ^(z|Z)$ ]] && help_for_config_domain
                                f_set_domain_and_phys_parameters $param
                                [[ $? -ne 0 ]] && ajuda
                                ;;
        -ts | --t_start )       shift
                                [ ! -z $1 ] && param=$1 || ajuda
                                t_start $param
                                [[ $? -ne 0 ]] && ajuda
                                ;;
        -ti |  --t_int )        shift
                                [ ! -z $1 ] && param=$1 || ajuda                                
                                t_integracao $param
                                [[ $? -ne 0 ]] && ajuda
                                ;;
        -tiout                ) shift
                                [[ $1 -eq 3 ]] || [[ $1 -eq 6 ]] && export _T_INTERVAL_OUTPUT_1=$(( $1 \* 60 ))
                                [[ $? -ne 0 ]] && ajuda
                                ;;                                
                                
        -gd | --global_data )  shift
                                [ ! -z $1 ] && param=$1 || ajuda
                                f_global_data $param
                                [[ $? -ne 0 ]] && ajuda
                                ;;
        -gti | --global_dt_int ) shift
                                [[ $1 -eq 1 ]] || [[ $1 -eq 3 ]] || [[ $1 -eq 6 ]] && GLOBAL_DATE_TIME_INTERVAL=$1
                                [[ $? -ne 0 ]] && mensagem "ERROR in the parameter gtr:${1} " && ajuda
 #                               NUM_PARAM=$(( $NUM_PARAM + 1)) No more MANDATORY
                                ;;
        -np | --numproces )     shift
                                [ ! -z $1 ] && export NUM_PROC=$1 || ajuda
                                ;;
        --wrf-time-step )       shift
                                [ ! -z $1 ] && WRF_TIME_STEP=$1 || ajuda  # the main var need be adjusted before the execution
                                ;;
        --use-hwthread-cpus )   WRF_PARAM_FOR_MPI_1=$(echo "--use-hwthread-cpus")
                                ;;
        --use-static-geogrid )  USE_STATIC_GEOGRID=$(echo "yes")
                                ;;
        --use-static-config )   USE_STATIC_NAMELIST_FILES=$(echo "yes")
                                ;;
        --use-alternate-data )  USE_ALTERNATE_DATA=$(echo "yes")
                                ;;
        -h | --help )           help
                                shutdown_execution " " 0
                                ;;
        * )                     help
                                shutdown_execution " ERROR: missing mandatory parameters. Leaving ...  " 1
    esac
    
    # Opção $1 já processada. O próximo argumento $2 será o $1.
    shift
done

# Teste para verificar se todos os parametros foram passados
#     CORRETAMENTE
if [ ${NUM_PARAM} -ne ${NUM_ARGUMENTOS} ]; then
    mensagem "ERROR: missing some mandatory parameters."
    help
fi


# We need to garantee that the option --use-alternate-data will define the
#    ultimate value of GLOBAL_DATA and GLOBAL_DATA_SOURCE
if [ $USE_ALTERNATE_DATA == "yes" ]; then
    f_use_alternate_data
    [[ $? -ne 0 ]] && ajuda
fi

###########################################################
###########################################################
#
#               Main CONFIGURATION setting
#  - Directories: now we have all the information (CONFIG + DATE-TIME)
#  - Parameters for the model (namelist): WPS and WRF
#
###########################################################
###########################################################


# Calculate the final DATE-TIME of the integration (date-time of the last forecast time)
#   Do not declare int (-i), because month 2 need to appear as 02
declare END_YEAR END_MONTH END_DAY END_HOUR 

t_calcular_data_hora_final ${START_YEAR} ${START_MONTH} ${START_DAY} ${START_HOUR}

## DEBUG
f_debug $0 START_DATE_TIME ${START_YEAR}-${START_MONTH}-${START_DAY}-${START_HOUR}
f_debug $0 END_DATE_TIME ${END_YEAR}-${END_MONTH}-${END_DAY}-${END_HOUR}

# ========================================================
#	     Set and/or create DIRECTORIES for:
#    - Where are the binaries
#    - Where are the terrain data
#    - Where to put MET data (meteorological data for ungrib)
#    - Where to put the results (WRFout and images from GrADS
#      	 And, fethc global met data
# ========================================================

# This function will set DIR variables and set/create WPS/WRF
#    DIR variables (DIR_DATA_INPUT/DIR_DATA_OUTPUT)
f_set_or_create_dir

# Em 02jan22: set DIRs
#     DIR_DATA_OUTPUT/DIR_DOMAIN_OUTPUT/
#     model-data-output/2021-12-31-12_dom_A-SC/wrf-1

# Em 03jan22: setting of input and output directories
#   DIR_WPS_INPUT=DIR_DATA_INPUT/yyyy-mm-dd-HH-[gfs|cptec-wrf]
#   or
#   DIR_WPS_INPUT=supplied by user

#   DIR_DOMAIN_OUTPUT=yyyy-mm-dd-HH_dom_[A-Z]-["short name of config domain"]
#   DIR_WRF_OUTPUT=${DIR_DATA_OUTPUT}/${DIR_DOMAIN_OUTPUT}/wrf-[a-z]


# If USE_ALTERNATE_DATA == "no", then the the global data will come
#      from NCEP(GFS) or CPTEC (WRF)
if [ $USE_ALTERNATE_DATA == "no" ]; then
    DIR_WPS_INPUT=${DIR_DATA_INPUT}/${START_YEAR}-${START_MONTH}-${START_DAY}-${START_HOUR}-$(echo ${GLOBAL_DATA_SOURCE} | tr [A-Z] [a-z])
    # Test and/or create the dir
    if [ ! -d ${DIR_WPS_INPUT} ]; then
        mkdir -p ${DIR_WPS_INPUT}
        [ $? -ne 0 ] && shutdown_execution "ERROR: problem in creating dir ${DIR_WPS_INPUT}" 1
    fi
fi

## DEBUG
f_debug $0 DIR_WPS_INPUT ${DIR_WPS_INPUT}


# TODO TODO
# Em 07jun2011: Arquivo com o log das rodadas
RODADAS_LOG=${DIR_WPS_INPUT}/rodadas-WRF-${START_YEAR}${START_MONTH}${START_DAY}${START_HOUR}.log

# 20220208
# DIR_DOMAIN_OUTPUT=${START_YEAR}-${START_MONTH}-${START_DAY}-${START_HOUR}-domain-$(echo ${CONFIG} | tr [A-Z] [a-z])-${CONFIG_NAME}    
DIR_DOMAIN_OUTPUT=${START_YEAR}-${START_MONTH}-${START_DAY}-${START_HOUR}_dom_${CONFIG_NAME}

# TODO está sendo criado em CURRENT_DIR


mensagem ">>>>>>> Configuration of the next round for the same CONFIG value   (STARTING)"

# Em 30jan22: find the next round for the same configuration.
#             The aim is to have different directories for different physical
#             configurations for the same domain/initial date-hour configuration.
# DIR_WRF_OUTPUT=${DIR_DATA_OUTPUT}/${DIR_DOMAIN_OUTPUT}/wrf-$VAL_LAST_LETTER_CONF

declare -l VAL_LAST_LETTER_CONF="a"   # Declare the var as lowercase

#STATUS=$(f_find_next_execution_round ${DIR_DOMAIN_OUTPUT})
f_find_next_execution_round ${DIR_DOMAIN_OUTPUT} $USE_STATIC_NAMELIST_FILES
if [[ $? -eq 0 ]]; then
    mensagem " WRF Model Output DIR: ${DIR_WRF_OUTPUT} "
else
    mensagem " WRF Model Output DIR (the last will be re-executed): ${DIR_WRF_OUTPUT} "
fi

unset VAL_LAST_LETTER_CONF

mensagem "<<<<<<< Configuration of the next round for the same CONFIG value   (ENDING)"


# Em 02jan22: set wrf namelist options (physics, domain, etc)
# f_set_domain_var


# 20220207: if user will test some value of TIME STEP different from the default for
#           the configuration, then it need be adjusted here, before execution
if [[ $WRF_TIME_STEP -gt 5 ]] && [[ $WRF_TIME_STEP -lt 300 ]]; then
    export _WRF_TIME_STEP=$WRF_TIME_STEP
fi
# Else, the WRF will use the default for the domain configuration in execution


# ========================================================
#
#             PROCESSING: Download MET GLOBAL data
#
# ========================================================

# The function fetch_global_data expects. Parameter:
#    $1 : directory to download
#    $2 : date-time of start of simulation: 2021-12-01-00 (00UTC)
#    $3 : time of forecast (in hours): 24, 48, 72
#    $4 : time step of global data (in hours): 1 (cptec-wrf), 3 (gfs), 6 (gfs)
#    $5 : gfs1p00 gfs0p50 gfs0p25 cptec_wrf_5km

# Obs: the value of variable GLOBAL_DATE_TIME_INTERVAL (in hour) is the same of
#      the parameter "interval_seconds" (in s) from "namelist.input"

# 20211223: if there was a problem, then retry. Retry more two times, then
#           switch to another global data. 
# TODO TODO TODO  this need MUCH MORE study. But, for now, only the basic.

# If USE_ALTERNATE_DATA == "no", then the the global data will come
#      from NCEP(GFS) or CPTEC (WRF)
if [ $USE_ALTERNATE_DATA == "no" ]; then
    status=0
    # If there were an a error, we will try again, until 5 times
    for i in {1..5}
    do
        ${CURRENT_DIR}/utils/fetch_global_data.sh  ${DIR_WPS_INPUT} ${START_YEAR}-${START_MONTH}-${START_DAY}-${START_HOUR} ${RUN_TIME_HOURS} ${GLOBAL_DATE_TIME_INTERVAL} ${GLOBAL_DATA}
        status=$(echo $?)
    done

    if [ $status -eq 2 ]; then
        shutdown_execution "ERROR: parameters for fetch_global_data.sh are INCORRECT."
    fi

    if [ $status -eq 1 ]; then
        shutdown_execution "ERROR: in the creation of the WPS data dir: ."
    fi

    if [ $i -eq 5 ] && [ $status -ne 0 ]; then
        shutdown_execution "ERROR: in fetching global data."
    fi
fi

# ========================================================
#
#             PROCESSING: Some directories checking
#
# ========================================================

    
if [ ! -d $GEODATA_PATH ]; then
    shutdown_execution "ERROR: no terrain data in WPS/geog. Leaving ..." 1 
fi


if [ ! -d ${WPS_PATH}/data ]; then
    mkdir -p ${WPS_PATH}/data
    #  Em 18jul10: vamos deixar para apagar depois.
    #  rm -rf $WPS_PATH/data/*
fi

# Em 18jul10: se não houver o diretório então há duas opções
if [ ! -d ${DIR_WRF_OUTPUT} ]; then
    mkdir -p ${DIR_WRF_OUTPUT}
fi


# ========================================================
#
#              PROCESSING:  Logging 
#
# ========================================================


# Em 17jul10: criação do arquivo DIR_WRF_OUTPUT/status-components-out-execution.log com os valores
#             que definem o status dos vários processamentos. Valores:
#      0 SUCESSO          diferente de 0 ERRO
#            Por padrão, todos serão setados para 1, caso o processamento tenha
#            sucesso, será ajustado para 0.
if test ! -e ${DIR_WRF_OUTPUT}/status-components-out-execution.log ; then
  touch ${DIR_WRF_OUTPUT}/status-components-out-execution.log
  echo "# Valores que definem o status dos vários processamentos." >>  ${DIR_WRF_OUTPUT}/status-components-out-execution.log
  echo "#    0 SUCESSO     diferente de 0 ERRO " >> ${DIR_WRF_OUTPUT}/status-components-out-execution.log
  echo "GEOGRID 1" >> ${DIR_WRF_OUTPUT}/status-components-out-execution.log
  echo "UNGRIB 1" >> ${DIR_WRF_OUTPUT}/status-components-out-execution.log
  echo "METGRID 1" >> ${DIR_WRF_OUTPUT}/status-components-out-execution.log
  echo "REAL 1" >> ${DIR_WRF_OUTPUT}/status-components-out-execution.log
  echo "WRF 1" >> ${DIR_WRF_OUTPUT}/status-components-out-execution.log
  echo "ARWPOST 1" >> ${DIR_WRF_OUTPUT}/status-components-out-execution.log
  echo "GRADS 1" >> ${DIR_WRF_OUTPUT}/status-components-out-execution.log
fi



echo "------------------------------------------------------------------------------------ " >> ${DIR_DATA_OUTPUT}/wrf-executions.log
#echo " " >> ${DIR_DATA_OUTPUT}/wrf-executions.log
echo -e "STARTING time: $( date +%G%b%d-%Hh%Mmin%ms )" >> ${DIR_DATA_OUTPUT}/wrf-executions.log
echo "${DIR_DOMAIN_OUTPUT} = ${DIR_WRF_OUTPUT}" >> ${DIR_DATA_OUTPUT}/wrf-executions.log
echo -e "\n Model Integration START: ${START_YEAR}-${START_MONTH}-${START_DAY}-${START_HOUR} END: ${END_YEAR}-${END_MONTH}-${END_DAY}-${END_HOUR} " >> ${DIR_DATA_OUTPUT}/wrf-executions.log
echo "Model Integration RUN TIME (hours): ${RUN_TIME_HOURS}  WRF_TIME_STEP (s): ${_WRF_TIME_STEP}" >> ${DIR_DATA_OUTPUT}/wrf-executions.log


###########################################################
###########################################################
#
#               START OF PROCESSING
#
#            WPS -> WRF -> POST-PROCESSING
# WPS: geogrid -> ungrib -> metgrid
# WRF: real.exe -> wrf.exe
###########################################################
###########################################################


# Valores para status:
# 0 = diretório já existe e a rodada foi completada
# 1 = diretório já existe e a rodada não foi completada com sucesso
# 2 = diretório não existe ainda
echo 1 > ${DIR_WRF_OUTPUT}/status-current-configuration.log


# TODO  TODO test the use of namelist files in a execution error

# 20220309: If we need use static namelist files (WPS and WRF), then the variable need setted to "yes".
#   Else, the normal execution is a dynamic generation of namelist files.
if [ x$USE_STATIC_NAMELIST_FILES == x"no" ]; then

    mensagem ">>>>>>>>  Generating ${WPS_PATH}/namelist.wps   (STARTING)"

    # >>>>>>>       NAMELIST.WPS --- START
    #  This namelist is used by: geogrib.exe, ungrib.exe, and metgrid.exe


    #  This script create the namelist.wps with values  obtained from exported variables.
    #  The function namelist.wps.sh expects these parameters:
    #    $1 : output format: WPS
    #    $2 : prefix (path+prefix) of data
    #    $3 : date-time of start of simulation: 2021-12-01-00 (00UTC)
    #    $4 : date-time of ending of simulationt (final date-time): 2021-12-02-00 (00UTC)
    #    $5 : temporal interval in which the input data are available (time step of global data, in hours): 1 (for cptec-wrf), 3 (for gfs), 6 (for gfs)
    #    $6 : directory of static geographical data (topo, veg, soil use)
    
    cd $WPS_PATH
    cp ${CURRENT_DIR}/wps/namelist.wps.sh ${WPS_PATH}/
    chmod u+x ${WPS_PATH}/namelist.wps.sh
    if [ -e ${WPS_PATH}/namelist.wps ]; then
        rm -f ${WPS_PATH}/namelist.wps
    fi

    ${WPS_PATH}/namelist.wps.sh  WPS  ${WPS_PATH}/data/FILE ${START_YEAR}-${START_MONTH}-${START_DAY}-${START_HOUR} ${END_YEAR}-${END_MONTH}-${END_DAY}-${END_HOUR} ${GLOBAL_DATE_TIME_INTERVAL} $GEODATA_PATH
    status=$?

    # First, backup the log file to the WRF output dir
    cp ${WPS_PATH}/namelist.wps ${DIR_WRF_OUTPUT} 2>/dev/null

    # Next, verify the output from status
    [[ $status -ne 0 ]] && shutdown_execution  "ERROR in (${WPS_PATH}/namelist.wps.sh). Exiting ..."  1

    mensagem "<<<<<<<  Generating ${WPS_PATH}/namelist.wps   (ENDING)"

fi #  if [ x$USE_STATIC_NAMELIST_FILES == x"no" ]; then


# ========================================================
#  GEOGRID: setup the Model domain (geogrid.exe)
#   Define the simulation domains, and to interpolate various
#         terrestrial data sets to the model grids 
#   Arquivo configuração: WPS/geogrid/GEOGRID.TBL
# ========================================================


status=$(cat ${DIR_WRF_OUTPUT}/status-components-out-execution.log | grep "GEOGRID" | cut -d' ' -f2)
if [ $status -ne 0 ] && [ $USE_STATIC_GEOGRID = "no" ]; then
    mensagem ">>>>>>> Program geogrid.exe (STARTING)"
    #  Em 18jul10: como estamos começando tudo do início, apagaremos o conteúdo.
    rm -rf ${WPS_PATH}/data/* 2>/dev/null

    cd $WPS_PATH
    if [ -e ${WPS_PATH}/geogrid/GEOGRID.TBL ]; then
      rm -f ${WPS_PATH}/geogrid/GEOGRID.TBL 2>/dev/null
    fi
    
    # TODO TODO
    ln -s ${WPS_PATH}/geogrid/GEOGRID.TBL.ARW ${WPS_PATH}/geogrid/GEOGRID.TBL
    
    ./geogrid.exe >& geogrid-${START_YEAR}${START_MONTH}${START_DAY}${START_HOUR}.log    
    
    grep -i "Successful completion of geogrid." geogrid-${START_YEAR}${START_MONTH}${START_DAY}${START_HOUR}.log
    status=$(echo $?)
    
    # First, backup the log.
    cp geogrid-${START_YEAR}${START_MONTH}${START_DAY}${START_HOUR}.log ${DIR_WRF_OUTPUT}
    

    mensagem "ERROR in (./geogrid.exe >& geogrid-${START_YEAR}${START_MONTH}${START_DAY}${START_HOUR}.log). We will USE GENERATED geo_em.d0[03] geogrid file."
    

    mensagem "<<<<<<< Program geogrid.exe (ENDING)"
    
    # Only adjusts SUCCESS to GEOGRID if there were no ERROR
    sed -i /GEOGRID/s/1/0/ ${DIR_WRF_OUTPUT}/status-components-out-execution.log
    
fi

if [ $status -ne 0 ] || [ $USE_STATIC_GEOGRID = "yes" ]; then
  # We can copy the  geogrid file generated previously via the program WRFDomainWizard if
  #   a) the status of processing geogrid resulted in ERROR (NO shutdown the execution)
  #   b) or, because the user choose --use-generated-geogrid
        #  Em 18jul10: como estamos começando tudo do início, apagaremos o conteúdo.
    rm -rf ${WPS_PATH}/data/* 2>/dev/null
    
    mensagem ">>>>>>> GEOGRID: copying the file(s) ${CURRENT_DIR}/config-domains/${CONFIG_NAME}/geo_em.d0[03].nc to the dir: ${WPS_PATH}/data (STARTING)"
        
    cp ${CURRENT_DIR}/config-domains/${CONFIG_NAME}/geo_em.d0?.nc ${WPS_PATH}/data
        
    cp ${CURRENT_DIR}/config-domains/${CONFIG_NAME}/geogrid.log ${DIR_WRF_OUTPUT}
    
    case $_MAX_DOMAIN in
    [1] ) [[ -e ${WPS_PATH}/data/geo_em.d01.nc ]] || shutdown_execution  "ERROR in GEOGRID. File ${WPS_PATH}/data/geo_em.d01.nc missing. Exiting ..." 1 ;;
    [2] ) [[ -e ${WPS_PATH}/data/geo_em.d01.nc ]] && [[ -e ${WPS_PATH}/data/geo_em.d02.nc ]] || shutdown_execution  "ERROR in GEOGRID. Files ${WPS_PATH}/data/geo_em.d0{1,2}.nc missing. Exiting ..." 1 ;;
    [3] ) [[ -e ${WPS_PATH}/data/geo_em.d01.nc ]] && [[ -e ${WPS_PATH}/data/geo_em.d02.nc ]] && [[ -e ${WPS_PATH}/data/geo_em.d03.nc ]] || shutdown_execution  "ERROR in GEOGRID. Files ${WPS_PATH}/data/geo_em.d0{1,2,3].nc missing. Exiting ..." 1 ;;
    *) echo ;;
    esac
    
        
    # Only adjusts SUCCESS to GEOGRID if there were no ERROR
    sed -i /GEOGRID/s/1/0/ ${DIR_WRF_OUTPUT}/status-components-out-execution.log

    mensagem ">>>>>>> GEOGRID: copying the file(s) ${CURRENT_DIR}/config-domains/${CONFIG_NAME}/geo_em.d0[03].nc to the dir: ${WPS_PATH}/data (FINISHING)"    
        
    fi

# ========================================================
#  UNGRIB
#   Arquivo configuração: WPS/Vtable -> WPS/ungrib/Variable_Tables/Vtable.GFS
#
#  Em 08jul10: Como o processamento do ungrib é usado tanto pelo
#       MM5 quanto pelo WRF, a execução será através do script
#       process_ungrib.sh. A definição de qual saída (MM5 ou WPS)
#       será gerada, está definida no namelist.wps, que será criado
#       no início do processamento do WPS.
#  Em 25out20: houve alteração no nome dos arquivos NCEP, logo o process_ungrib.sh
#       deverá ser alterado
# ========================================================
status=$(cat ${DIR_WRF_OUTPUT}/status-components-out-execution.log | grep "UNGRIB" | cut -d' ' -f2)
if [ $status -ne 0 ]; then
    mensagem ">>>>>>> Program ungrib.exe (STARTING)"
    cd ${WPS_PATH}
    
    cp ${CURRENT_DIR}/wps/executes_ungrib.sh ${WPS_PATH}
    chmod u+x ${WPS_PATH}/executes_ungrib.sh
    cp ${CURRENT_DIR}/wps/link_grib.csh ${WPS_PATH}
    chmod u+x ${WPS_PATH}/link_grib.csh
    
    # 20220201: the script executes_ungrib.sh expects:
    #  $1 : directory of global data
    #       DIR_WPS_INPUT=DIR_DATA_INPUT/yyyy-mm-dd-HH-[gfs|cptec-wrf]
    #  $2 : time of initialization: 00 06 12 18
    #  $3 : gfs1p00 gfs0p50 gfs0p25 cptec_wrf_5km    
    ${WPS_PATH}/executes_ungrib.sh ${DIR_WPS_INPUT} ${START_YEAR}-${START_MONTH}-${START_DAY}-${START_HOUR} ${START_HOUR} ${GLOBAL_DATA}
    status=$(echo $?)

    # First, backup the log.
    cp ungrib-${START_YEAR}${START_MONTH}${START_DAY}${START_HOUR}.log ${DIR_WRF_OUTPUT} 2>/dev/null
    
    # Next, verify the output from status
    [[ ${status}  -ne 0 ]] && shutdown_execution "ERROR in (${WPS_PATH}/executes_ungrib.sh ${DIR_WPS_INPUT} ${START_YEAR}-${START_MONTH}-${START_DAY}-${START_HOUR} ${START_HOUR} ${GLOBAL_DATA}). Leaving ..." 1
    
    mensagem "<<<<<<< Program ungrib.exe (ENDING)"
    
    # Only adjusts SUCCESS to UNGRIB if there were no ERROR
    sed -i /UNGRIB/s/1/0/ ${DIR_WRF_OUTPUT}/status-components-out-execution.log
    
fi


# ========================================================
#  METGRID: interpolate the input data onto our model domain (metgrid.exe)
#   Arquivo configuração: WPS/metgrid/METGRID.TBL
# ========================================================
status=$(cat ${DIR_WRF_OUTPUT}/status-components-out-execution.log | grep -i "METGRID" | cut -d' ' -f2)
if [ $status -ne 0 ]; then
    mensagem ">>>>>>> Program metgrid.exe (STARTING)"
    
    cd $WPS_PATH
    if [ -e ${WPS_PATH}/metgrid/METGRID.TBL ]; then
      rm -f ${WPS_PATH}/metgrid/METGRID.TBL
    fi
    
    ln -s ${WPS_PATH}/metgrid/METGRID.TBL.ARW ${WPS_PATH}/metgrid/METGRID.TBL
    
    ./metgrid.exe >& metgrid-${START_YEAR}${START_MONTH}${START_DAY}${START_HOUR}.log

    grep -i "Successful completion of metgrid." metgrid-${START_YEAR}${START_MONTH}${START_DAY}${START_HOUR}.log
    status=$(echo $?)

    # First, backup the log.
    cp metgrid-${START_YEAR}${START_MONTH}${START_DAY}${START_HOUR}.log ${DIR_WRF_OUTPUT}

    # Next, verify the output from status
    [[ $status -ne 0 ]] && shutdown_execution "ERROR in (./metgrid.exe >& metgrid-${START_YEAR}${START_MONTH}${START_DAY}${START_HOUR}.log). Leaving ..." 1
    
    mensagem "<<<<<<< Program metgrid.exe (ENDING)"
    
    # Only adjusts SUCCESS to METGRID if there were no ERROR
    sed -i /METGRID/s/1/0/ ${DIR_WRF_OUTPUT}/status-components-out-execution.log
fi


# ========================================================
#  namelist.input  Generates from option VARIABLES
#  Files: WRF/run/namelist.input and WRF/test/em_real/namelist.input
# ========================================================

# 20220309: If we need use static namelist files (WPS and WRF), then the variable need setted to "yes".
#   Else, the normal execution is a dynamic generation of namelist files.
if [ x$USE_STATIC_NAMELIST_FILES == x"no" ]; then
    mensagem ">>>>>>>>  Generating ${WRF_PATH}/run/namelist.input --- STARTING"
    #  This script create the namelist.input with values obtained from exported variables.
        #  The function namelist.input.wrf.sh expects these parameters:
        #    $1 : number of NUM_METGRID_LEVELS
        #    $2 : date-time of start of simulation: 2021-12-01-00 (00UTC)
        #    $3 : run time length of forecast (in hours): 24, 48, 72
        #    $4 : temporal interval in which the input data are available (time step of global data, in hours): 1 (cptec-wrf), 3 (gfs), 6 (gfs)

    if [ ${GEN_WRFOUT_DIAGS_AFWA} -eq 1 ]; then
        cp ${CURRENT_DIR}/wrf/namelist.input.wrf.afwa-diags.sh  ${WRF_PATH}/test/em_real/namelist.input.wrf.sh
    else
        cp ${CURRENT_DIR}/wrf/namelist.input.wrf.sh  ${WRF_PATH}/test/em_real/namelist.input.wrf.sh

    # Apagar o arquivo (link) namelis.input anterior
    if [ -e ${WRF_PATH}/test/em_real/namelist.input ]; then
        rm -f ${WRF_PATH}/test/em_real/namelist.input 2>/dev/null
    fi

    # Program ncdump: we will use the one provided by instalation of NetCDF4)
    NUM_METGRID_LEVELS=$($NCDUMP -h ${WPS_PATH}/data/met_em.d01.${START_YEAR}-${START_MONTH}-${START_DAY}_${START_HOUR}:00:00.nc | grep num_metgrid_levels | head -n1 | cut -d' ' -f 3)
    status=$?

    ## DEBUG
    f_debug $0 NUM_METGRID_LEVELS $NUM_METGRID_LEVELS
        
    # This test is a minimum requirement, because there were more specific
    if [[ $status -ne 0 ]] || [[ $NUM_METGRID_LEVELS -lt 25 ]] || [[ $NUM_METGRID_LEVELS -gt 60 ]]; then
        shutdown_execution  "ERROR in ($NCDUMP -h ${WPS_PATH}/data/met_em.d01.${START_YEAR}-${START_MONTH}-${START_DAY}_${START_HOUR}:00:00.nc): number of levels. Exiting."  1
    fi

    cd ${WRF_PATH}/test/em_real/ 2>/dev/null

    chmod u+x ${WRF_PATH}/test/em_real/namelist.input.wrf.sh

        
    ./namelist.input.wrf.sh ${NUM_METGRID_LEVELS} ${START_YEAR}-${START_MONTH}-${START_DAY}-${START_HOUR}  ${END_YEAR}-${END_MONTH}-${END_DAY}-${END_HOUR}  ${RUN_TIME_HOURS} ${GLOBAL_DATE_TIME_INTERVAL}
    # First, save the status of execution, and,
    status=$?

    # Backup the log file to the WRF output dir
    cp ${WRF_PATH}/test/em_real/namelist.input ${DIR_WRF_OUTPUT}  2>/dev/null
        
    # Next, verify the output from status
    [[ ${status} -ne 0 ]] && shutdown_execution  "ERROR: problem in execution of ${WPS_PATH}/namelist.wps.sh. Exiting."  1
    
    # Copy the namelist.input to WRF/run (the output running WRF)
    #    and to the WRF output data
    rm -f ${WRF_PATH}/run/namelist.input 2>/dev/null
    cp ${WRF_PATH}/test/em_real/namelist.input ${WRF_PATH}/run  2>/dev/null
            

    mensagem "<<<<<<<  Generating ${WRF_PATH}/run/namelist.input --- ENDING"

fi # [ x$USE_STATIC_NAMELIST_FILES == x"no" ]; then


# ========================================================
#  WRF -> real.exe   Creation the LBC (Lateral and Boundary Conditions)
#     Configuration: WRF/run/namelist.input
#     Input data (files): met_em.d01.$INICIO_START_YEAR-$INICIO_START_MONTH-$INICIO_
#     Output data (files): wrfinput_d0?   wrfbdy_d0? 
# ========================================================
status=$(cat ${DIR_WRF_OUTPUT}/status-components-out-execution.log | grep -i "REAL" | cut -d' ' -f2)
if [ $status -ne 0 ]; then

    mensagem ">>>>>>> Program real.exe (STARTING)"
    
    # DIR of working WRF
    cd ${WRF_PATH}/run
    
    ### Remove old stuff
    # INPUT data for real: not the date generated by the output from metgrid, but
    # the LINKS for that data
    rm -f ${WRF_PATH}/test/em_real/met_em* 2>/dev/null
    rm -f ${WRF_PATH}/test/em_real/rsl.{out,error}.0??? 2>/dev/null
    
    rm -f ${WRF_PATH}/run/met_em* 2>/dev/null
    rm -f ${WRF_PATH}/run/rsl.{out,error}.0??? 2>/dev/null
    
    # OUTPUT data from real.exe    
    rm -f ${WRF_PATH}/test/em_real/wrfinput_d0? > /dev/null
    rm -f ${WRF_PATH}/test/em_real/wrfbdy_d0? > /dev/null
        
    rm -f ${WRF_PATH}/run/wrfinput_d0? > /dev/null
    rm -f ${WRF_PATH}/run/wrfbdy_d0? > /dev/null
    
    for met_em_files in ${WPS_PATH}/data/met_em*
    do
      ln -s ${met_em_files} ${WRF_PATH}/test/em_real/
      ln -s ${met_em_files} ${WRF_PATH}/run/
    done

    mensagem ">>>>>>>>  Running:(mpirun -np ${NUM_PROC} ${WRF_PATH}/run/real.exe) --- STARTING"
              
    mpirun -v --map-by core -np $NUM_PROC ${WRF_PATH}/run/real.exe
    status=$?

    # Backup the LOG and OUTPUT files to the WRF output dir    
    # rsl.{out,error}.00xx  where xx are the core (task process) in execution (:from np)
    cp ${WRF_PATH}/run/rsl.*.* ${DIR_WRF_OUTPUT} 2>/dev/null
    cd ${DIR_WRF_OUTPUT}
    for file in rsl.{out,error}.* ; do mv $file $(echo $file | sed s/rsl./rsl.real./) ; done
    cd -
   
 
    if [ ! -e ${DIR_WRF_OUTPUT}/rsl.real.out.0000 ]; then
      shutdown_execution "ERROR in (mpirun -np ${NUM_PROC} ${WRF_PATH}/run/real.exe): file ${WRF_PATH}/run/rsl.out.0000 not found. Exiting ..."  1
    fi    

    grep -i "SUCCESS COMPLETE REAL_EM INIT" ${DIR_WRF_OUTPUT}/rsl.real.out.0000
    if [ $? -ne 0 ]; then
        shutdown_execution "ERROR in (mpirun -np ${NUM_PROC} ${WRF_PATH}/run/real.exe). Exiting ..." 1
    fi

    # Check the output file (wrfinput_d01: single time level data at model's start time)
    if [ -e  ${WRF_PATH}/run/wrfinput_d01 ] && [ -e  ${WRF_PATH}/run/wrfbdy_d01 ]; then
        # Number of output Times for lateral boundary output
        #           Times - 1
        NUM_OUTPUT_TIMES=$(( $RUN_TIME_HOURS / $GLOBAL_DATE_TIME_INTERVAL ))
        # Check the number of TISTART_MONTH present in each output file. 
        # TODO TODO Not satisfatory. TO REVIEW.
        NUM_TIMES=$(ncdump -v Times ${WRF_PATH}/run/wrfbdy_d01 | grep Time | head -n 1 | cut -d '(' -f2 | cut -d ' ' -f 1)
    #   ncdump -v Times wrfbdy_d01 | grep Time | head -n 1
    #	Time = UNLIMITED ; // (4 currently)
    #   ncdump -v Times wrfinput_d01 | grep Time | head -n 1
    #	Time = UNLIMITED ; // (1 currently)
    #   Time = UNLIMITED ; // (4 currently)
    # variables:
    # char Times(Time, DateStrLen) ;
    # Times =
    #  "2021-09-30_00:00:00",
    #  "2021-09-30_06:00:00",
    #  "2021-09-30_12:00:00",
    #  "2021-09-30_18:00:00" ;
        if [ $NUM_TIMES -ne $NUM_OUTPUT_TIMES ]; then
                shutdown_execution "ERROR in (mpirun -np $NUM_PROC ${WRF_PATH}/run/real.exe): number of times($NUM_TIMES) in wrfbdy_d01 are different from number of output times ($NUM_OUTPUT_TIMES). Exiting ..."  1
        fi
    else
        shutdown_execution "ERROR: Problem in execution of real.exe. Exiting ..." 1
    fi

    ### FINISH TESTING the output of real
    
    mensagem "<<<<<<<<  Running:(mpirun -np $NUM_PROC ${WRF_PATH}/run/real.exe) --- ENDING"
   
    cp ${WRF_PATH}/run/wrfinput_d0? ${DIR_WRF_OUTPUT} 2>/dev/null
    cp ${WRF_PATH}/run/wrfbdy_d01 ${DIR_WRF_OUTPUT} 2>/dev/null
    
    # Only adjusts SUCCESS to REAL if there were no ERROR
    sed -i /REAL/s/1/0/ ${DIR_WRF_OUTPUT}/status-components-out-execution.log
    
    mensagem "<<<<<<< Program real.exe (ENDING)"
fi



###TODO TODO TODO TODO
# Em 20210826: outros testes a serem inclusos
#    Namelist options are written to a separate file, “namelist.output.”
#    Check the output times written to the wrfout* file by using the netCDF command:
#    ncdump –v Times wrfout_d01_yyyy-mm-dd_hh:00:00


# ========================================================
#  WRF -> wrf.exe   Integration (forecast)
#     Configuration: WRF/run/namelist.input
#     Input data (files): wrfinput_d0?  wrfbdy_d0? >
#     Output data (files): wrfout_d01_yyyy-mm-dd_hh:00:00
# ========================================================

status=$(cat ${DIR_WRF_OUTPUT}/status-components-out-execution.log | grep -i "WRF" | cut -d' ' -f2)
if [ ${status} -ne 0 ]; then

    mensagem ">>>>>>> Program wrf.exe (STARTING)"

    # DIR of working WRF
    cd ${WRF_PATH}/run

    # Remove old stuff
    rm -f ${WRF_PATH}/run/rsl.{out,error}.0??? 2>/dev/null
    # Remove OUTPUT data from wrf.exe
    # TODO TODO today are more output files, mainly from diags and afwa diags
    rm -f ${WRF_PATH}/run/wrfout_d?? 2>/dev/null

     
    [[ -e ${WRF_PATH}/run/wrfinput_d01 ]] ||  shutdown_execution "ERROR. Input file (${WRF_PATH}/test/em_real/wrfinput_d01) not found. Exiting ..." 1      
    [[ -e ${WRF_PATH}/run/wrfbdy_d01 ]] ||  shutdown_execution "ERROR. Input file (${WRF_PATH}/test/em_real/wrfbdy_d01) not found. Exiting ..." 1
          
    
    mpirun -v --map-by core $WRF_PARAM_FOR_MPI_1 -np ${NUM_PROC} ./wrf.exe

    cp ${WRF_PATH}/run/wrfinput_d0? ${DIR_WRF_OUTPUT} 2>/dev/null
    cp ${WRF_PATH}/run/wrfbdy_d01 ${DIR_WRF_OUTPUT} 2>/dev/null
    
    
    ### START TESTING the output of wrf    
    if [ ! -e ${WRF_PATH}/run/rsl.out.0000 ]; then
      shutdown_execution "ERROR in (mpirun -v --map-by core  $WRF_PARAM_FOR_MPI_1 -np ${NUM_PROC} ./wrf.exe): file rsl.out.0000 not found. Exiting ..."  1
    fi        

    # Backup the LOG and INPUT files (from wrf.exe) to the WRF output dir    
    # rsl.{out,error}.00xx  where xx are the core (task process) in execution (:from np)
    mv ${WRF_PATH}/run/rsl.*.* ${DIR_WRF_OUTPUT} 2>/dev/null
    
    cd ${DIR_WRF_OUTPUT}
    for file in rsl.{out,error}.* ; do mv $file $(echo $file | sed s/rsl./rsl.wrf./) ; done
    cd -

    grep -i "SUCCESS COMPLETE WRF" ${DIR_WRF_OUTPUT}/rsl.wrf.out.0000
    if [ $? -ne 0 ]; then
        shutdown_execution "ERROR in (mpirun -v --map-by core $WRF_PARAM_FOR_MPI_1 -np ${NUM_PROC} ./wrf.exe). Exiting ..." 1
    fi    
    
    [[ -e wrfout_d01_${START_YEAR}-${START_MONTH}-${START_DAY}_${START_HOUR}:00:00 ]] ||  shutdown_execution "ERROR in (mpirun -v --map-by core $WRF_PARAM_FOR_MPI_1 -np ${NUM_PROC} ./wrf.exe). Output file (${WRF_PATH}/run/wrfout_d01_${START_YEAR}-${START_MONTH}-${START_DAY}_${START_HOUR}:00:00) not created. Exiting ..." 1
    
    if [ $_MAX_DOMAIN -eq 2 ]; then
        [[ -e wrfout_d02_${START_YEAR}-${START_MONTH}-${START_DAY}_${START_HOUR}:00:00 ]] || shutdown_execution "ERROR in (mpirun -v --map-by core $WRF_PARAM_FOR_MPI_1 -np ${NUM_PROC} ./wrf.exe). Output file (${WRF_PATH}/run/wrfout_d02_${START_YEAR}-${START_MONTH}-${START_DAY}_${START_HOUR}:00:00) not created. Exiting ..." 1
    fi

    if [ $_MAX_DOMAIN -eq 3 ]; then
        [[ -e wrfout_d03_${START_YEAR}-${START_MONTH}-${START_DAY}_${START_HOUR}:00:00 ]] ||  shutdown_execution "ERROR in (mpirun -v --map-by core $WRF_PARAM_FOR_MPI_1 -np ${NUM_PROC} ./wrf.exe). Output file (${WRF_PATH}/run/wrfout_d02_${START_YEAR}-${START_MONTH}-${START_DAY}_${START_HOUR}:00:00) not created. Exiting ..." 1
    fi

    # Write the time spent by wrf.exe
    TIME_SPENT_S=$(grep "Timing for main" ${DIR_WRF_OUTPUT}/rsl.wrf.out.0000 | awk '{ SUM += $9} END { print SUM }')
    RESULT=$(( TIME_SPENT_S/3600 ))
    TIME_SPENT_H=$( printf "%d" $RESULT )
    if [ $TIME_SPENT_H -gt 48 ]; then
        RESULT=$(( TIME_SPENT_H/24 ))
        TIME_SPENT_DAYS=$( printf "%f" $RESULT )
    fi


    echo "WRF: total time of wrf.exe execution: $TIME_SPENT_S (seconds) $TIME_SPENT_H (hours) $TIME_SPENT_DAYS (days)" >> ${DIR_DATA_OUTPUT}/wrf-executions.log
     
    ## DEBUG
    f_debug $0 "TOTAL TIME that wrf.exe spent running (h)" $TIME_SPENT_H    
    
    
    ### FINISH TESTING the output of wrf

    # WRF run with sucess and the output files were created. Then
    #    backup (MOVE) the files to the WRF output dir
    mv ${WRF_PATH}/run/wrfout_d0[1-3]*  ${DIR_WRF_OUTPUT} 2>/dev/null
    
    cd ${DIR_WRF_OUTPUT}
    for file in wrfout_d*; do mv $file $(echo $file | cut -d':' -f 1).nc ; done
    cd -    


    if [ ${GEN_WRFOUT_DIAGS_AFWA} -eq 1 ]; then
        mv ${WRF_PATH}/run/WRF-out-diagnostics_PLEVELS_domain_${START_YEAR}-${START_MONTH}-${START_DAY}_${START_HOUR}.grb ${DIR_WRF_OUTPUT} 2>/dev/null
        mv ${WRF_PATH}/run/WRF-out-diagnostics_ZLEVELS_domain_${START_YEAR}-${START_MONTH}-${START_DAY}_${START_HOUR}.grb ${DIR_WRF_OUTPUT} 2>/dev/null
        mv ${WRF_PATH}/run/WRF-out-radar_domain_${START_YEAR}-${START_MONTH}-${START_DAY}_${START_HOUR}.grb ${DIR_WRF_OUTPUT} 2>/dev/null
    fi


    
    # With no error, we can move INPUT files (from real.exe) to the WRF output dir
    mv ${WRF_PATH}/run/wrfinput_d0? ${DIR_WRF_OUTPUT} 2>/dev/null
    mv ${WRF_PATH}/run/wrfbdy_d01 ${DIR_WRF_OUTPUT} 2>/dev/null    
        
    # Only adjusts SUCCESS to WRF if there were no ERROR
    sed -i /WRF/s/1/0/ ${DIR_WRF_OUTPUT}/status-components-out-execution.log
    
    mensagem "<<<<<<< Program wrf.exe (ENDING)"
fi


###########################################################
###########################################################
#                   POST-PROCESSING
# 20220213: now we put the ARWpost processing in another 
#           script, because the differente domains could requer
#           some specific output data.

#                        ARWpost


###########################################################
###########################################################



# ========================================================
#  ARWpost -> bin/ARWpost/ARWpost.exe
#   Convert WRF out files (wrfout_d0?), from NetCDF format, to
#     GrADS format (files .ctl and .dat)
#   Configuration: bin/ARWpost/namelist.ARWpost
#     Input data (files): wrfout_d01_yyyy-mm-dd_hh:00:00
#     Output (files): wrfout_d01_yyyy-mm-dd_hh.ctl and the corresponding
#                     wrfout_d01_yyyy-mm-dd_hh.dat  
# ========================================================


status=$(cat ${DIR_WRF_OUTPUT}/status-components-out-execution.log | grep -i "ARWPOST" | cut -d' ' -f2)
if [ $status -ne 0 ]; then

    mensagem ">>>>>>> Program ARWpost.exe (STARTING)"

    cd $BIN_PATH/ARWpost
    
    # Apagar o arquivo (link) namelist.ARWpost anterior
    if [ -e namelist.ARWpost ]; then
          rm -f namelist.ARWpost
    fi
    cp $CURRENT_DIR/post_processing/namelist.ARWpost.sh $BIN_PATH/ARWpost
    cp $CURRENT_DIR/post_processing/process_arwpost.sh $BIN_PATH/ARWpost
    chmod u+x namelist.ARWpost.sh process_arwpost.sh
    
    # Not absolutelly necesssary.
    cp $CURRENT_DIR/post_processing/arwpost_fields_file.txt $BIN_PATH/ARWpost
    
    #  20220212: parameters to the script
    #    $1: domain configuration: A | B | C ...
    #    $2: path for ARWpost binary (default: $HOME/bin/ARWpost
    #    $3: path for the output of the dat and ctl files (DIR_WRF_OUTPUT)
    #    $4: date-time of start of simulation: 2021-12-01-00 (00UTC)
    #    $5: date-time of ending of simulation (final date-time): 2021-12-02-00
    ./process_arwpost.sh $CONFIG "${BIN_PATH}/ARWpost" $DIR_WRF_OUTPUT  ${START_YEAR}-${START_MONTH}-${START_DAY}-${START_HOUR}  ${END_YEAR}-${END_MONTH}-${END_DAY}-${END_HOUR}
    # First, save the status of execution, and,
    status=$?

    # Backup the log file to the WRF output dir
    #cp ${WRF_PATH}/test/em_real/namelist.input ${DIR_WRF_OUTPUT}  2>/dev/null
    
    
    # Next, verify the output from status
    [[ $status -ne 0 ]] && shutdown_execution  "ERROR: problem in (./process_arwpost.sh $CONFIG "${BIN_PATH}/ARWpost" $DIR_WRF_OUTPUT  ${START_YEAR}-${START_MONTH}-${START_DAY}-${START_HOUR}  ${END_YEAR}-${END_MONTH}-${END_DAY}-${END_HOUR}). Exiting."  1

    # Only adjusts SUCCESS to WRF if there were no ERROR
    sed -i /ARWPOST/s/1/0/ ${DIR_WRF_OUTPUT}/status-components-out-execution.log
    
    mensagem "<<<<<<< Program ARWpost.exe (ENDING)"
   
fi




# ========================================================
#    GrADS
#   
#     GrADS format (files .ctl and .dat)
#     
#     Input (files): wrfout_d01_yyyy-mm-dd_hh.ctl and the corresponding
#                     wrfout_d01_yyyy-mm-dd_hh.dat
#     Output: plots of variables in format png
# ========================================================


status=$(cat ${DIR_WRF_OUTPUT}/status-components-out-execution.log | grep -i "GRADS" | cut -d' ' -f2)
    if [ $status -ne 0 ]; then
    # Parâmetros: $1:Diretório saída dados      $2: Configuração corrente
    # Em 18mar13: variavel abaixo usada para verificar o resultado das operacoes GrAds
    GRADES_RESULTADO=0

    cp $CURRENT_DIR/post_processing/generate_output_graphics.sh $DIR_WRF_OUTPUT
    cp $CURRENT_DIR/post_processing/grads/plot-sigma-wrf.gs $DIR_WRF_OUTPUT 2>/dev/null
    cp $CURRENT_DIR/post_processing/grads/plot-pressao-wrf.gs $DIR_WRF_OUTPUT 2>/dev/null
    cp $CURRENT_DIR/post_processing/grads/plot.gs $DIR_WRF_OUTPUT 2>/dev/null

    # Em 18dez13: inclusao da copia dos arquivos cbarn.gs e rgbset.gs considerando
    #    a adequacao  das saidas graficas em funcao do GT de Modelagem Numerica.
    cp -f ${CURRENT_DIR}/post_processing/grads/cbarn.gs ${CURRENT_DIR}/post_processing/grads/rgbset.gs  $DIR_WRF_OUTPUT

    cd $DIR_WRF_OUTPUT 2> /dev/null
    [[ $? -ne 0 ]] && exit 1
    chmod u+x generate_output_graphics.sh
      
    ./generate_output_graphics.sh $DIR_WRF_OUTPUT $CONFIG $_E_VERT $_MAP_PROJECTION ${START_YEAR}-${START_MONTH}-${START_DAY}-${START_HOUR}  ${END_YEAR}-${END_MONTH}-${END_DAY}-${END_HOUR}
    
    
    
	  if test $? -ne 0 ; then
		GRADS_RESULTADO=1
	  fi
	  
	  # Em 10mai2021: SO ALTERA status processamento, se houve o mesmo
      if [ $GRADES_RESULTADO = '0' ]; then
          sed -i /GRADS/s/1/0/ ${DIR_WRF_OUTPUT}/status-components-out-execution.log
      fi	  
	  
    # Em 03jun2011: arquivos gs serão apagados da rodada.
    # Em 10mai2021: SO APAGA se houve processamento na rodada
    # rm -f ${DIR_WRF_OUTPUT}/*.gs 2>/dev/null
fi



# ========================================================
#    Output 
#   
#     WRF diagnostics (in PLEVEL and ZLEVEL)
#     
#     WRF out radar
#                  
#     
# ========================================================
#   ${DIR_WRF_OUTPUT}/WRF-out-diagnostics_PLEVELS_domain_${START_YEAR}-${START_MONTH}-${START_DAY}_${START_HOUR}.grb
#   ${DIR_WRF_OUTPUT}/WRF-out-diagnostics_ZLEVELS_domain_${START_YEAR}-${START_MONTH}-${START_DAY}_${START_HOUR}.grb
#   ${DIR_WRF_OUTPUT}/radar_domain.${START_YEAR}-${START_MONTH}-${START_DAY}_${START_HOUR} ${DIR_WRF_OUTPUT}.grb




#########################################
#  FINISHING and ADJUSTING STATUS
#  It will be used to run the same configuration at the point
#      where it left off due to PROBLEMS in some component.
#  The file ${DIR_WRF_OUTPUT}/status-components-out-execution.log
#      will contain the results (0 sucess or 1 not executed) for all
#      the components of the model.
#########################################

echo "FINISH time: $( date +%G%b%d-%Hh%Mmin%ms )" >> ${DIR_DATA_OUTPUT}/wrf-executions.log
echo "------------------------------------------------------------------------------------  " >> ${DIR_DATA_OUTPUT}/wrf-executions.log



# 19mar13: what the output numbers means (status):
# 0 = directory exists and the run finished
# 1 = directory exists and there was a problem in the execution
# 2 = directory does not exist yet

# Search for some value 1 (ERROR in some component).
grep 1$ ${DIR_WRF_OUTPUT}/status-components-out-execution.log
# If $? = 0 then some module does not finish the execution
if [ $? = 0 ]; then
    echo 1 > ${DIR_WRF_OUTPUT}/status-current-configuration.log
    exit 1
else
    echo 0 > ${DIR_WRF_OUTPUT}/status-current-configuration.log
fi


exit 0

